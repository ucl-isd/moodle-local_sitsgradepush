{"version":3,"file":"dashboard.min.js","sources":["../src/dashboard.js"],"sourcesContent":["import {schedulePushTask, getAssessmentsUpdate, updateProgressBar, removeMapping} from \"./sitsgradepush_helper\";\nimport notification from \"core/notification\";\n\nlet updatePageIntervalId = null; // The interval ID for updating the progress.\nlet globalCourseid = null; // The global variable for course ID.\nlet updatePageDelay = 15000; // The delay for updating the page.\n\n/**\n * Initialize the dashboard page.\n *\n * @param {int} courseid\n */\nexport const init = (courseid) => {\n    // If there is a saved message by successfully mapped an assessment in localStorage, display it.\n    displayNotification();\n\n    // Set the global variable course ID.\n    globalCourseid = courseid;\n\n    // Initialize the module delivery dropdown list.\n    initModuleDeliverySelector(window);\n\n    // Initialize assessment updates.\n    initAssessmentUpdate(courseid);\n\n    // Initialize confirmation modal.\n    initConfirmationModal(window);\n\n    // Initialize the remove source buttons.\n    initRemoveSourceConfirmModal();\n};\n\n/**\n * Initialize the module delivery dropdown list.\n *\n * @param {Window} page\n */\nfunction initModuleDeliverySelector(page) {\n    // Find all the dropdown items.\n    let dropdownitems = document.querySelectorAll('.jump-to-dropdown-item');\n\n    // Add event listener to each dropdown item.\n    dropdownitems.forEach(function(item) {\n        item.addEventListener('click', function() {\n            let value = item.getAttribute('data-value');\n            if (value !== null) {\n                // Get the scroll position of the page.\n                let pagePosition = getPagePosition(page);\n\n                // Find the selected table by ID.\n                let selectedTable = document.getElementById(value);\n\n                // Calculate the scroll position to be 100 pixels above the table.\n                if (selectedTable) {\n                    let offset = -100;\n                    let tablePosition = selectedTable.getBoundingClientRect().top;\n                    let scrollPosition = pagePosition + tablePosition + offset;\n\n                    // Scroll to the calculated position.\n                    page.scrollTo({\n                        top: scrollPosition,\n                        behavior: \"smooth\"\n                    });\n                }\n            }\n        });\n    });\n}\n\n/**\n * Initialize the confirmation modal.\n *\n * @param {Window} page\n */\nfunction initConfirmationModal(page) {\n    // Find the confirmation modal.\n    let confirmTransferButton = document.getElementById(\"js-transfer-modal-button\");\n\n    // Exit if the confirmation modal is not found.\n    if (confirmTransferButton === null) {\n        return;\n    }\n\n    // Add event listener to the confirmation modal.\n    confirmTransferButton.addEventListener(\"click\", async function() {\n        let assessmentmappingid = confirmTransferButton.getAttribute('data-assessmentmappingid');\n\n        // Check should we record non-submission as 0 AB.\n        let recordnonsubmission = document.getElementById('recordnonsubmission').checked;\n\n        if (assessmentmappingid !== null && assessmentmappingid !== 'all') {\n            // Single transfer.\n            await pushMarks(assessmentmappingid, recordnonsubmission);\n        } else if (assessmentmappingid === 'all') {\n            // Bulk transfer.\n            await pushAllMarks(page, recordnonsubmission);\n        }\n    });\n}\n\n/**\n * Initialize the assessment updates.\n *\n * @param {int} courseid\n */\nfunction initAssessmentUpdate(courseid) {\n    updateAssessments(courseid);\n\n    // Update the page every 15 seconds.\n    updatePageIntervalId = setInterval(() => {\n        updateAssessments(courseid);\n    }, updatePageDelay);\n\n    // Add event listener to stop update the page when the page is not visible. e.g. when the user switches to another tab.\n    document.addEventListener(\"visibilitychange\", function() {\n        if (document.visibilityState === \"hidden\") {\n            clearInterval(updatePageIntervalId);\n        } else {\n            updateAssessments(courseid);\n            updatePageIntervalId = setInterval(() => {\n                updateAssessments(courseid);\n            }, updatePageDelay);\n        }\n    });\n}\n\n/**\n * Initialize the remove source confirmation modal.\n *\n * @return {void}\n */\nfunction initRemoveSourceConfirmModal() {\n    // Find the remove source modal confirm button.\n    let removeSourceModalConfirmBtn = document.getElementById('js-remove-source-modal-button');\n\n    // Add event listener to the remove source modal confirm button.\n    removeSourceModalConfirmBtn.addEventListener('click', async function() {\n        // Get assessment mapping id.\n        let assessmentmappingid = removeSourceModalConfirmBtn.getAttribute('data-assessmentmappingid');\n\n        const result = await removeMapping(globalCourseid, assessmentmappingid);\n        if (result.success) {\n            window.location.reload();\n        } else {\n            showTransferErrorMessage(assessmentmappingid, result.message);\n        }\n    });\n}\n\n/**\n * Schedule a push task when the user clicks on a push button.\n *\n * @param {int} assessmentmappingid The button element.\n * @param {boolean} recordnonsubmission Record non-submission as 0 AB.\n * @return {Promise|boolean} Promise.\n */\nasync function pushMarks(assessmentmappingid, recordnonsubmission) {\n    try {\n        // Schedule a push task.\n        let result = await schedulePushTask(assessmentmappingid, recordnonsubmission);\n\n        // Check if the push task is successfully scheduled.\n        if (result.success) {\n            // Update the UI once a task is scheduled successfully.\n            updateUIOnTaskScheduling(assessmentmappingid);\n        }\n        let message = '';\n        if (!result.success && result.message) {\n            message = result.message;\n        }\n\n        // Show error message if there is any.\n        showTransferErrorMessage(assessmentmappingid, message);\n        return result;\n    } catch (error) {\n        window.console.error(error);\n        return false;\n    }\n}\n\n/**\n *\n * @param {HTMLElement} page\n * @param {boolean} recordnonsubmission Record non-submission as 0 AB.\n * @return {Promise<void>}\n */\nasync function pushAllMarks(page, recordnonsubmission) {\n    // Find all the mappings that have marks to push based on the recordnonsubmission setting.\n    let assessmentmappings = Array.from(document.querySelectorAll('.marks-col-field'))\n        .filter(element => {\n            // Get current mapping statuses.\n            let marksCount = parseInt(element.getAttribute('data-markscount'), 10);\n            let nonSubmittedCount = parseInt(element.getAttribute('data-nonsubmittedcount'), 10);\n            let taskRunning = element.getAttribute('data-task-running') === 'true';\n\n            // Nothing to push if there are no marks and no non-submitted records.\n            if (marksCount === 0 && nonSubmittedCount === 0) {\n                return false;\n            }\n\n            if (recordnonsubmission) {\n                // Record non-submission enabled, return true when mapping has marks or non-submitted records and no task running.\n                return (marksCount > 0 || nonSubmittedCount > 0) && !taskRunning;\n            } else {\n                // Record non-submission disabled, return true when mapping has marks and no task running.\n                return marksCount > 0 && !taskRunning;\n            }\n        });\n\n    // Number of not disabled push buttons.\n    let total = assessmentmappings.length;\n    let count = 0;\n\n    // Create an array to hold all the Promises.\n    let promises = [];\n\n    // Push grades to SITS for each component grade.\n    assessmentmappings.forEach(function(element) {\n        // Get the assessment mapping ID.\n        let assessmentmappingid = element.getAttribute('data-assessmentmappingid');\n        // Create a Promise for each button and push it into the array.\n        let promise = pushMarks(assessmentmappingid, recordnonsubmission)\n            .then(function(result) {\n                if (result.success) {\n                    count = count + 1;\n                }\n                return result;\n            }).catch(function(error) {\n                window.console.error(error);\n            });\n\n        promises.push(promise);\n    });\n\n    // Wait for all Promises to resolve.\n    await Promise.all(promises);\n\n    // Scroll to the top of the page so that the user can see the notification.\n    page.scrollTo({top: 0, behavior: \"instant\"});\n\n    // Show the notification.\n    await notification.addNotification({\n        message: count + ' of ' + total + ' push tasks have been scheduled.',\n        type: (count === total) ? 'success' : 'warning'\n    });\n\n    // Update the page information.\n    updateAssessments(globalCourseid);\n}\n\n/**\n * Update the UI once a task is scheduled successfully.\n * e.g. hide change source button, show progress bar.\n *\n * @param {int} assessmentmappingid\n */\nfunction updateUIOnTaskScheduling(assessmentmappingid) {\n    // Find the change source button.\n    let changeSourceButton = document.getElementById('change-source-button-' + assessmentmappingid);\n    if (changeSourceButton) {\n        // Hide the change source button.\n        changeSourceButton.style.display = 'none';\n    }\n\n    // Hide the transfer button and show the progress bar immediately.\n    let assessments = [\n        {task: {progress: 0}, assessmentmappingid: assessmentmappingid, markscount: 0, nonsubmittedcount: 0},\n    ];\n    updateMarksColumn(assessments);\n}\n\n/**\n * Update the dashboard page with the latest information.\n * e.g. progress bars, push buttons, records icons.\n *\n * @param {int} courseid\n * @return {Promise<void>}\n */\nasync function updateAssessments(courseid) {\n    // Get latest assessments information for the dashboard page.\n    let update = await getAssessmentsUpdate(courseid);\n\n    if (update.success) {\n        // Parse the JSON string.\n        let assessments = JSON.parse(update.assessments);\n\n        if (assessments.length > 0) {\n            updateMarksColumn(assessments);\n        }\n    } else {\n        // Stop update the page if error occurred.\n        clearInterval(updatePageIntervalId);\n        window.console.error(update.message);\n    }\n}\n\n/**\n * Update the marks' column for all assessments mappings.\n *\n * @param {object[]} assessments\n */\nfunction updateMarksColumn(assessments) {\n    // Update assessment components which has mappings.\n    assessments.forEach(assessment => {\n        let marksColumnFieldId = 'marks-col-field-' + assessment.assessmentmappingid;\n        let marksColumnField = document.getElementById(marksColumnFieldId);\n        if (marksColumnField) {\n            let marksContainer = marksColumnField.querySelector('.marks-container');\n            let taskContainer = marksColumnField.querySelector('.task-status-container');\n\n            // Set the marks count attribute.\n            marksColumnField.setAttribute('data-markscount', assessment.markscount);\n\n            // Set the non submitted count attribute.\n            marksColumnField.setAttribute('data-nonsubmittedcount', assessment.nonsubmittedcount);\n\n            // Marks count element that displays the number of marks.\n            let marksCountElement = marksColumnField.querySelector('.marks-count');\n\n            // Update the marks count.\n            marksCountElement.innerHTML = assessment.markscount;\n\n            // Get the transfer button.\n            let transferButton = marksColumnField.querySelector('.js-btn-transfer-marks');\n\n            // Show the transfer button if there are marks or non-submitted records.\n            if (assessment.markscount > 0 || assessment.nonsubmittedcount > 0) {\n                transferButton.classList.remove('d-none');\n            } else {\n                transferButton.classList.add('d-none');\n            }\n\n            // Show marks information if no task running.\n            if (assessment.task === null) {\n                marksColumnField.setAttribute('data-task-running', false);\n                taskContainer.classList.add('d-none');\n                marksContainer.classList.remove('d-none');\n            } else {\n                // Show task information if task running.\n                marksColumnField.setAttribute('data-task-running', true);\n                marksContainer.classList.add('d-none');\n                taskContainer.classList.remove('d-none');\n                updateProgressBar(taskContainer, assessment.task.progress);\n            }\n        }\n    });\n}\n\n/**\n * Show an error message at the table row under the button.\n *\n * @param {int} assessmentmappingid\n * @param {string} message\n */\nfunction showTransferErrorMessage(assessmentmappingid, message) {\n    // Find the marks column field.\n    let marksColumnField = document.getElementById('marks-col-field-' + assessmentmappingid);\n\n    // Find the closest row to the button.\n    let currentrow = marksColumnField.closest(\"tr\");\n\n    // Remove the existing error message row if it exists.\n    if (currentrow.nextElementSibling !== null &&\n        currentrow.nextElementSibling.classList.contains(\"error-message-row\")) {\n        currentrow.nextElementSibling.remove();\n    }\n\n    if (message !== '') {\n        // Create an error message row.\n        let errormessagerow = document.createElement(\"tr\");\n\n        // Set the class and content of the error message row.\n        errormessagerow.setAttribute(\"class\", \"error-message-row\");\n        errormessagerow.innerHTML =\n            '<td colspan=\"4>\">' +\n            '<div class=\"alert alert-danger\" role=\"alert\">' + message + '</div>' +\n            '</td>';\n\n        // Insert the error message row after the current row.\n        currentrow.insertAdjacentElement(\"afterend\", errormessagerow);\n    }\n}\n\n/**\n * Display a notification if a success message is available in localStorage.\n */\nfunction displayNotification() {\n    // Retrieve the success message from localStorage.\n    let successMessage = localStorage.getItem('successMessage');\n\n    // Check if a success message is available.\n    if (successMessage) {\n        // Display the success message using a notification library or other means.\n        notification.addNotification({\n            message: successMessage,\n            type: 'success'\n        });\n\n        // Remove the success message from localStorage to avoid showing it again.\n        localStorage.removeItem('successMessage');\n    }\n}\n\n/**\n * Get the scroll position of the page.\n *\n * @param {HTMLElement} page\n * @return {*|number}\n */\nfunction getPagePosition(page) {\n    if (page instanceof Window) {\n        // Get the scroll position of the page.\n        return page.scrollY;\n    } else {\n        // Get the scroll position of the page.\n        return page.scrollTop;\n    }\n}\n"],"names":["updatePageIntervalId","globalCourseid","pushMarks","assessmentmappingid","recordnonsubmission","result","success","changeSourceButton","document","getElementById","style","display","updateMarksColumn","task","progress","markscount","nonsubmittedcount","updateUIOnTaskScheduling","message","showTransferErrorMessage","error","window","console","updateAssessments","courseid","update","assessments","JSON","parse","length","clearInterval","forEach","assessment","marksColumnFieldId","marksColumnField","marksContainer","querySelector","taskContainer","setAttribute","innerHTML","transferButton","classList","remove","add","currentrow","closest","nextElementSibling","contains","errormessagerow","createElement","insertAdjacentElement","page","successMessage","localStorage","getItem","addNotification","type","removeItem","displayNotification","querySelectorAll","item","addEventListener","value","getAttribute","pagePosition","Window","scrollY","scrollTop","getPagePosition","selectedTable","offset","scrollPosition","getBoundingClientRect","top","scrollTo","behavior","setInterval","visibilityState","initAssessmentUpdate","confirmTransferButton","async","checked","assessmentmappings","Array","from","filter","element","marksCount","parseInt","nonSubmittedCount","taskRunning","total","count","promises","promise","then","catch","push","Promise","all","notification","pushAllMarks","initConfirmationModal","removeSourceModalConfirmBtn","location","reload","initRemoveSourceConfirmModal"],"mappings":"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"}