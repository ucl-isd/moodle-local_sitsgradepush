{"version":3,"file":"dashboard.min.js","sources":["../src/dashboard.js"],"sourcesContent":["import {schedulePushTask} from \"./push_tasks\";\nimport notification from \"core/notification\";\n\nexport const init = () => {\n    // Find the page element.\n    let page = document.getElementById(\"page\");\n\n    // Find the module delivery table selector.\n    let tableSelector = document.getElementById(\"module-delivery-selector\");\n\n    // Jump to the selected module delivery table when the user selects a module delivery.\n    tableSelector.addEventListener(\"change\", function() {\n        // Find the selected table by ID.\n        let selectedTable = document.getElementById(tableSelector.value);\n\n        // Calculate the scroll position to be 100 pixels above the table.\n        if (selectedTable) {\n            let offset = -100;\n            let tablePosition = selectedTable.getBoundingClientRect().top;\n            let scrollPosition = page.scrollTop + tablePosition + offset;\n\n            // Scroll to the calculated position.\n            page.scrollTo({\n                top: scrollPosition,\n                behavior: \"smooth\"\n            });\n        }\n    });\n\n    // Find the back to top button.\n    let backToTopButton = document.getElementById(\"backToTopButton\");\n\n    // Show the button when the user scrolls down 100 pixels from the top of the page.\n    page.addEventListener(\"scroll\", function() {\n        if (page.scrollTop >= 100) {\n            backToTopButton.style.display = \"block\";\n        } else {\n            backToTopButton.style.display = \"none\";\n        }\n    });\n\n    // Scroll to the top of the page when the button is clicked.\n    backToTopButton.addEventListener(\"click\", function() {\n        page.scrollTo({top: 0, behavior: \"smooth\"});\n        tableSelector.selectedIndex = 0;\n    });\n\n    // Get all the push buttons that are not disabled.\n    let mabpushbuttons = document.querySelectorAll(\".push-mark-button:not([disabled])\");\n\n    // Push grades when the user clicks on each enabled push button.\n    mabpushbuttons.forEach(function(button) {\n        button.addEventListener(\"click\", function() {\n            pushgrade(this);\n        });\n    });\n\n    // Get the push all button.\n    let pushallbutton = document.getElementById(\"push-all-button\");\n\n    // Push grades for all the not disabled push buttons when the user clicks on the push all button.\n    pushallbutton.addEventListener(\"click\", async function() {\n        // Get the updated not disabled push buttons.\n        let mabpushbuttons = document.querySelectorAll(\".push-mark-button:not([disabled])\");\n\n        // Number of not disabled push buttons.\n        let total = mabpushbuttons.length;\n        let count = 0;\n\n        // Create an array to hold all the Promises.\n        let promises = [];\n\n        // Push grades to SITS for each MAB.\n        mabpushbuttons.forEach(function(button) {\n            // Create a Promise for each button and push it into the array.\n            let promise = pushgrade(button)\n                .then(function(result) {\n                    if (result) {\n                        count = count + 1;\n                    }\n                    return result;\n                }).catch(function(error) {\n                    window.console.error(error);\n                });\n\n            promises.push(promise);\n        });\n\n        // Wait for all Promises to resolve.\n        await Promise.all(promises);\n\n        // Scroll to the top of the page so that the user can see the notification.\n        page.scrollTo({top: 0, behavior: \"instant\"});\n\n        // Show the notification.\n        notification.addNotification({\n            message: count + ' of ' + total + ' push tasks have been scheduled.',\n            type: (count === total) ? 'success' : 'warning'\n        });\n    });\n};\n\n/**\n * Schedule a push task when the user clicks on a push button.\n *\n * @param {HTMLElement} button The button element.\n * @return {Promise} Promise.\n */\nasync function pushgrade(button) {\n    try {\n        // Get the assessment mapping ID from the button.\n        let assessmentmappingid = button.getAttribute(\"data-assessmentmappingid\");\n\n        // Schedule a push task.\n        let result = await schedulePushTask(assessmentmappingid);\n\n        // Check if the push task is successfully scheduled.\n        if (result.success) {\n            // Update the icon.\n            let icon = button.parentNode.parentNode.querySelector(\"span:last-child\");\n            icon.innerHTML = '<i class=\"fa-solid fa-hourglass-start\" data-toggle=\"tooltip\" data-placement=\"top\" ' +\n                'title=\"' + result.status + '\"></i>';\n\n            // Disable the push button after scheduled push task successfully.\n            button.disabled = true;\n\n            // Remove the tooltip (for Firefox and Safari).\n            let tooltipid = button.getAttribute(\"aria-describedby\");\n            if (tooltipid !== null && document.getElementById(tooltipid) !== null) {\n                document.getElementById(tooltipid).remove();\n            }\n        } else {\n            // Create an error message row.\n            let errormessagerow = document.createElement(\"tr\");\n\n            // Set the class and content of the error message row.\n            errormessagerow.setAttribute(\"class\", \"error-message-row\");\n            errormessagerow.innerHTML =\n                '<td colspan=\"6>\">' +\n                '<div class=\"alert alert-danger\" role=\"alert\">' + result.message + '</div>' +\n                '</td>';\n\n            // Find the closest row to the button.\n            let currentrow = button.closest(\"tr\");\n\n            // Remove the existing error message row if it exists.\n            if (currentrow.nextElementSibling !== null &&\n                currentrow.nextElementSibling.classList.contains(\"error-message-row\")) {\n                currentrow.nextElementSibling.remove();\n            }\n\n            // Insert the error message row after the current row.\n            currentrow.insertAdjacentElement(\"afterend\", errormessagerow);\n        }\n\n        return result.success;\n    } catch (error) {\n        window.console.error(error);\n        return false;\n    }\n}\n"],"names":["pushgrade","button","assessmentmappingid","getAttribute","result","success","parentNode","querySelector","innerHTML","status","disabled","tooltipid","document","getElementById","remove","errormessagerow","createElement","setAttribute","message","currentrow","closest","nextElementSibling","classList","contains","insertAdjacentElement","error","window","console","page","tableSelector","addEventListener","selectedTable","value","offset","tablePosition","getBoundingClientRect","top","scrollPosition","scrollTop","scrollTo","behavior","backToTopButton","style","display","selectedIndex","querySelectorAll","forEach","this","async","mabpushbuttons","total","length","count","promises","promise","then","catch","push","Promise","all","addNotification","type"],"mappings":"4SA4GeA,UAAUC,gBAGbC,oBAAsBD,OAAOE,aAAa,4BAG1CC,aAAe,gCAAiBF,wBAGhCE,OAAOC,QAAS,CAELJ,OAAOK,WAAWA,WAAWC,cAAc,mBACjDC,UAAY,4FACDJ,OAAOK,OAAS,SAGhCR,OAAOS,UAAW,MAGdC,UAAYV,OAAOE,aAAa,oBAClB,OAAdQ,WAA6D,OAAvCC,SAASC,eAAeF,YAC9CC,SAASC,eAAeF,WAAWG,aAEpC,KAECC,gBAAkBH,SAASI,cAAc,MAG7CD,gBAAgBE,aAAa,QAAS,qBACtCF,gBAAgBP,UACZ,iEACkDJ,OAAOc,QADzD,kBAKAC,WAAalB,OAAOmB,QAAQ,MAGM,OAAlCD,WAAWE,oBACXF,WAAWE,mBAAmBC,UAAUC,SAAS,sBACjDJ,WAAWE,mBAAmBP,SAIlCK,WAAWK,sBAAsB,WAAYT,wBAG1CX,OAAOC,QAChB,MAAOoB,cACLC,OAAOC,QAAQF,MAAMA,QACd,iBA3JK,SAEZG,KAAOhB,SAASC,eAAe,QAG/BgB,cAAgBjB,SAASC,eAAe,4BAG5CgB,cAAcC,iBAAiB,UAAU,eAEjCC,cAAgBnB,SAASC,eAAegB,cAAcG,UAGtDD,cAAe,KACXE,QAAU,IACVC,cAAgBH,cAAcI,wBAAwBC,IACtDC,eAAiBT,KAAKU,UAAYJ,cAAgBD,OAGtDL,KAAKW,SAAS,CACVH,IAAKC,eACLG,SAAU,mBAMlBC,gBAAkB7B,SAASC,eAAe,mBAG9Ce,KAAKE,iBAAiB,UAAU,WACxBF,KAAKU,WAAa,IAClBG,gBAAgBC,MAAMC,QAAU,QAEhCF,gBAAgBC,MAAMC,QAAU,UAKxCF,gBAAgBX,iBAAiB,SAAS,WACtCF,KAAKW,SAAS,CAACH,IAAK,EAAGI,SAAU,WACjCX,cAAce,cAAgB,KAIbhC,SAASiC,iBAAiB,qCAGhCC,SAAQ,SAAS7C,QAC5BA,OAAO6B,iBAAiB,SAAS,WAC7B9B,UAAU+C,YAKEnC,SAASC,eAAe,mBAG9BiB,iBAAiB,SAASkB,qBAEhCC,eAAiBrC,SAASiC,iBAAiB,qCAG3CK,MAAQD,eAAeE,OACvBC,MAAQ,EAGRC,SAAW,GAGfJ,eAAeH,SAAQ,SAAS7C,YAExBqD,QAAUtD,UAAUC,QACnBsD,MAAK,SAASnD,eACPA,SACAgD,OAAgB,GAEbhD,UACRoD,OAAM,SAAS/B,OACdC,OAAOC,QAAQF,MAAMA,UAG7B4B,SAASI,KAAKH,kBAIZI,QAAQC,IAAIN,UAGlBzB,KAAKW,SAAS,CAACH,IAAK,EAAGI,SAAU,kCAGpBoB,gBAAgB,CACzB1C,QAASkC,MAAQ,OAASF,MAAQ,mCAClCW,KAAOT,QAAUF,MAAS,UAAY"}