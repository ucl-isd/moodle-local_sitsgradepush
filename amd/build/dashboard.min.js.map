{"version":3,"file":"dashboard.min.js","sources":["../src/dashboard.js"],"sourcesContent":["import {\n    schedulePushTask,\n    getTransferStudents,\n    transferMarkForStudent,\n    getAssessmentsUpdate\n} from \"./sitsgradepush_helper\";\nimport {createProgressBar, updateProgressBar, createSpinner} from \"./progress\";\nimport notification from \"core/notification\";\nimport ModalFactory from 'core/modal_factory';\nimport ModalEvents from 'core/modal_events';\n\nlet updatePageIntervalId = null; // The interval ID for updating the progress.\nlet syncThreshold = 30; // The threshold which determines whether it is a sync or async marks transfer.\nlet globalCourseid = null; // The global variable for course ID.\nlet updatePageDelay = 15000; // The delay for updating the page.\nlet async = null; // The async config.\n\n/**\n * Initialize the dashboard page.\n *\n * @param {int} courseid\n * @param {int} syncThresholdConfig\n * @param {int} asyncConfig\n * @param {string} moodleVersion\n */\nexport const init = (courseid, syncThresholdConfig, asyncConfig, moodleVersion) => {\n    // If there is a saved message by successfully mapped an assessment in localStorage, display it.\n    displayNotification();\n\n    // Set the sync threshold from the plugin config.\n    syncThreshold = syncThresholdConfig;\n\n    // Set the global variable course ID.\n    globalCourseid = courseid;\n\n    // Set the async config.\n    async = asyncConfig;\n\n    let page;\n\n    // Get the scrollable page element depending on the Moodle version.\n    if (moodleVersion > '2023100900') {\n        // Moodle 4.3 and above.\n        page = window;\n    } else {\n        // Moodle 4.2 and below.\n        page = document.getElementById(\"page\");\n    }\n\n    // Initialize the module delivery dropdown list.\n    let tableSelector = initModuleDeliverySelector(page);\n\n    // Initialize the back to top button.\n    initBackToTopButton(page, tableSelector);\n\n    // Initialize the change source buttons.\n    initChangeSourceButtons();\n\n    // Initialize the push buttons.\n    initPushMarkButtons(page, courseid);\n\n    // Initialize the push all button.\n    initPushAllButton(page, courseid);\n\n    // Update the dashboard page with the latest information.\n    // E.g. progress bars, push buttons, records icons.\n    updateAssessments(courseid);\n\n    // Update the page every 15 seconds.\n    updatePageIntervalId = setInterval(() => {\n        updateAssessments(globalCourseid);\n    }, updatePageDelay);\n\n};\n\n/**\n * Initialize the module delivery dropdown list.\n *\n * @param {HTMLElement} page\n * @return {HTMLElement}\n */\nfunction initModuleDeliverySelector(page) {\n    // Find the module delivery table selector.\n    let tableSelector = document.getElementById(\"module-delivery-selector\");\n\n    // Jump to the selected module delivery table when the user selects a module delivery.\n    tableSelector.addEventListener(\"change\", function() {\n        // Find the selected table by ID.\n        let selectedTable = document.getElementById(tableSelector.value);\n\n        // Get the scroll position of the page.\n        let pagePosition = getPagePosition(page);\n\n        // Calculate the scroll position to be 100 pixels above the table.\n        if (selectedTable) {\n            let offset = -100;\n            let tablePosition = selectedTable.getBoundingClientRect().top;\n            let scrollPosition = pagePosition + tablePosition + offset;\n\n            // Scroll to the calculated position.\n            page.scrollTo({\n                top: scrollPosition,\n                behavior: \"smooth\"\n            });\n        }\n    });\n\n    return tableSelector;\n}\n\n/**\n * Initialize the back to top button.\n *\n * @param {HTMLElement} page\n * @param {HTMLElement} tableSelector\n */\nfunction initBackToTopButton(page, tableSelector) {\n    // Find the back to top button.\n    let backToTopButton = document.getElementById(\"backToTopButton\");\n\n    // Show the button when the user scrolls down 100 pixels from the top of the page.\n    page.addEventListener(\"scroll\", function() {\n        // Get the scroll position of the page.\n        if (getPagePosition(page) >= 100) {\n            backToTopButton.style.display = \"block\";\n        } else {\n            backToTopButton.style.display = \"none\";\n        }\n    });\n\n    // Scroll to the top of the page when the button is clicked.\n    backToTopButton.addEventListener(\"click\", function() {\n        page.scrollTo({top: 0, behavior: \"smooth\"});\n        tableSelector.selectedIndex = 0;\n    });\n}\n\n/**\n * Initialize the change source buttons.\n *\n */\nfunction initChangeSourceButtons() {\n    // Get all change source buttons.\n    let changesourcebuttons = document.querySelectorAll(\".change-source-button:not([disabled])\");\n\n    // Add event listener to each change source button.\n    // When the user clicks on each change source button, redirect to the select source page.\n    if (changesourcebuttons.length > 0) {\n        changesourcebuttons.forEach(function(button) {\n            button.addEventListener(\"click\", function() {\n                // Redirect to the change source page.\n                window.location.href = button.getAttribute(\"data-url\");\n            });\n        });\n    }\n}\n\n/**\n * Initialize the push mark buttons.\n *\n * @param {HTMLElement} page\n * @param {int} courseid\n */\nfunction initPushMarkButtons(page, courseid) {\n    // Get all the push buttons that are not disabled.\n    let mabpushbuttons = document.querySelectorAll(\".push-mark-button\");\n\n    if (mabpushbuttons.length > 0) {\n        // Push grades when the user clicks on each enabled push button.\n        mabpushbuttons.forEach(function(button) {\n            button.addEventListener(\"click\", async function() {\n                // Find the number of students to push grades.\n                let studentcount = button.getAttribute(\"data-numberofstudents\");\n                let assessmentmappingid = button.getAttribute(\"data-assessmentmappingid\");\n\n                // Disable the button if there is no assessment mapping ID.\n                if (assessmentmappingid === null) {\n                    button.disabled = true;\n                    return;\n                }\n\n                if (studentcount === '0') {\n                    // Show an error message if there is no student to push grades.\n                    showErrorMessageForButton(button, 'There are no marks to transfer.');\n                    return;\n                }\n\n                // Do synchronous marks transfer if the number of marks to be transferred is less than the sync threshold.\n                // Or if the async config is disabled.\n                if ((studentcount > 0 && studentcount < syncThreshold) || async === '0') {\n                    await syncMarksTransfer(assessmentmappingid);\n                } else {\n                    // Schedule an asynchronous marks transfer task.\n                    let result = await pushMarks(this);\n                    if (result.success) {\n                        // Update the page after scheduling a marks transfer task.\n                        updateAssessments(courseid);\n                    }\n                }\n            });\n        });\n    }\n}\n\n/**\n * Initialize the push all button.\n *\n * @param {HTMLElement} page\n * @param {int} courseid\n */\nfunction initPushAllButton(page, courseid) {\n    // Get the push all button.\n    let pushallbutton = document.getElementById(\"push-all-button\");\n\n    // Push grades for all the not disabled push buttons when the user clicks on the push all button.\n    pushallbutton.addEventListener(\"click\", async function() {\n        // Get the updated not disabled push buttons and has assessment ID.\n        let mabpushbuttons = document.querySelectorAll(\".push-mark-button:not([disabled])[data-assessmentmappingid]\");\n\n        // Number of not disabled push buttons.\n        let total = mabpushbuttons.length;\n        let count = 0;\n\n        // Create an array to hold all the Promises.\n        let promises = [];\n\n        // Push grades to SITS for each component grade.\n        mabpushbuttons.forEach(function(button) {\n            // Create a Promise for each button and push it into the array.\n            let promise = pushMarks(button)\n                .then(function(result) {\n                    if (result.success) {\n                        count = count + 1;\n                    }\n                    return result;\n                }).catch(function(error) {\n                    window.console.error(error);\n                });\n\n            promises.push(promise);\n        });\n\n        // Wait for all Promises to resolve.\n        await Promise.all(promises);\n\n        // Scroll to the top of the page so that the user can see the notification.\n        page.scrollTo({top: 0, behavior: \"instant\"});\n\n        // Show the notification.\n        await notification.addNotification({\n            message: count + ' of ' + total + ' push tasks have been scheduled.',\n            type: (count === total) ? 'success' : 'warning'\n        });\n\n        // Update the page information.\n        updateAssessments(courseid);\n    });\n}\n\n/**\n * Schedule a push task when the user clicks on a push button.\n *\n * @param {HTMLElement} button The button element.\n * @return {Promise|boolean} Promise.\n */\nasync function pushMarks(button) {\n    try {\n        // Get the assessment mapping ID from the button.\n        let assessmentmappingid = button.getAttribute(\"data-assessmentmappingid\");\n\n        // Schedule a push task.\n        let result = await schedulePushTask(assessmentmappingid);\n\n        // Check if the push task is successfully scheduled.\n        if (result.success) {\n            // Remove the tooltip (for Firefox and Safari).\n            let tooltipid = button.getAttribute(\"aria-describedby\");\n            if (tooltipid !== null && document.getElementById(tooltipid) !== null) {\n                document.getElementById(tooltipid).remove();\n            }\n        } else {\n            // Show an error message if the transfer task is not successfully scheduled.\n            showErrorMessageForButton(button, result.message);\n        }\n\n        return result;\n    } catch (error) {\n        window.console.error(error);\n        return false;\n    }\n}\n\n/**\n * Update the dashboard page with the latest information.\n * e.g. progress bars, push buttons, records icons.\n *\n * @param {int} courseid\n * @return {Promise<void>}\n */\nasync function updateAssessments(courseid) {\n    // Get latest assessments information for the dashboard page.\n    let update = await getAssessmentsUpdate(courseid);\n\n    if (update.success) {\n        // Parse the JSON string.\n        let assessments = JSON.parse(update.assessments);\n\n        if (assessments.length > 0) {\n            // Update the all the progress bars and push buttons.\n            updateTasksProgresses(assessments);\n\n            // Update the records icons.\n            updateIcon(assessments);\n        }\n    } else {\n        // Stop update the page if error occurred.\n        clearInterval(updatePageIntervalId);\n        window.console.error(update.message);\n    }\n}\n\n/**\n * Update all the progress bars and push buttons in the dashboard page.\n *\n * @param {object[]} assessments\n */\nfunction updateTasksProgresses(assessments) {\n    // Filter assessments that are having task in progress.\n    let assessmentsHasTasks = assessments.filter(assessment => assessment.task !== null);\n\n    // The assessment mapping IDs having task in progress.\n    let assessmentIds = new Set(assessmentsHasTasks.map(item => item.assessmentmappingid));\n\n    // Update the progress bars.\n    updateProgressBars(assessmentsHasTasks, assessmentIds);\n\n    // Update the push buttons.\n    updatePushButtons(assessmentIds);\n}\n\n/**\n * Update all the progress bars in the dashboard page.\n *\n * @param {object[]} assessmentsHasTasks\n * @param {Set} assessmentIds\n */\nfunction updateProgressBars(assessmentsHasTasks, assessmentIds) {\n    let progressBars = document.querySelectorAll('.progress.async');\n\n    // Remove the progress bars that are not in the assessmentIds.\n    progressBars.forEach(progressBar => {\n        if (!assessmentIds.has(progressBar.getAttribute('data-assessmentmappingid'))) {\n            progressBar.remove();\n        }\n    });\n\n    assessmentsHasTasks.forEach(assessment => {\n        let progressBarId = 'progress-bar-' + assessment.task.assessmentmappingid;\n        let progressBar = document.getElementById(progressBarId);\n        let task = assessment.task;\n\n        // If the progress bar not exists, create a new one, otherwise update the progress.\n        if (!progressBar) {\n            progressBar = createProgressBar(progressBarId, 'async', task.assessmentmappingid, task.progress);\n            let button = document.querySelector('.push-mark-button[data-assessmentmappingid=\"' + task.assessmentmappingid + '\"]');\n            button.parentNode.parentNode.insertAdjacentElement('afterend', progressBar);\n        } else {\n            updateProgressBar(progressBar, task.progress);\n        }\n    });\n}\n\n/**\n * Update all the push buttons in the dashboard page.\n *\n * @param {Set} assessmentIds The assessment mapping IDs having task in progress.\n */\nfunction updatePushButtons(assessmentIds) {\n    // Find all push buttons.\n    let pushButtons = document.querySelectorAll('.push-mark-button');\n\n    pushButtons.forEach(function(pushButton) {\n        let assessmentmappingid = pushButton.getAttribute('data-assessmentmappingid');\n\n        if (assessmentIds.has(assessmentmappingid)) {\n            // If the task ID is found, show spinner and disable button.\n            let spinner = createSpinner('text-light', 'spinner-border-sm');\n            pushButton.innerHTML = spinner.outerHTML;\n            pushButton.disabled = true;\n        } else if (assessmentmappingid !== null) {\n            // Reset the button to the original state.\n            pushButton.innerHTML = '<i class=\"fa-solid fa-upload\"></i>';\n            pushButton.disabled = false;\n        } else {\n            // No assessment mapping, disable the button.\n            pushButton.disabled = true;\n        }\n    });\n}\n\n/**\n * Update the icons to show that there are transfer records.\n *\n * @param {object[]} assessments\n */\nfunction updateIcon(assessments) {\n    let pushButtons = document.querySelectorAll('.push-mark-button');\n\n    // Get assessment mappings that have transfer records.\n    let assessmentsHasTransferRecords = assessments.filter(update => update.transferrecords === 1);\n\n    // Extract the assessment mapping IDs.\n    let assessmentIds = new Set(assessmentsHasTransferRecords.map(assessment => assessment.assessmentmappingid));\n\n    // Update the icons to show that there are transfer records.\n    pushButtons.forEach(function(button) {\n        let assessmentmappingid = button.getAttribute('data-assessmentmappingid');\n        let icon = button.parentNode.parentNode.querySelector('.records-icon');\n        if (assessmentIds.has(assessmentmappingid)) {\n            if (icon.classList.contains('fa-circle-info')) {\n                icon.classList.replace('fa-solid', 'fa-regular');\n                icon.classList.replace('fa-circle-info', 'fa-file-lines');\n            }\n        } else {\n            if (icon.classList.contains('fa-file-lines')) {\n                icon.classList.replace('fa-regular', 'fa-solid');\n                icon.classList.replace('fa-file-lines', 'fa-circle-info');\n            }\n        }\n    });\n}\n\n/**\n * Transfer marks for all the students in the assessment mapping synchronously.\n *\n * @param {int} assessmentmappingid\n * @return {Promise<void>}\n */\nasync function syncMarksTransfer(assessmentmappingid) {\n    // Stop the page update while transferring marks.\n    clearInterval(updatePageIntervalId);\n\n    // Get the students to transfer marks.\n    let result = await getTransferStudents(assessmentmappingid);\n\n    if (result.success) {\n        if (result.students.length > 0) {\n            let progressbar =\n                createProgressBar('dashboard-progress-bar-sync', 'sync', assessmentmappingid, 0, true);\n\n            // Create a modal to show the progress.\n            let modal = await ModalFactory.create({\n                type: ModalFactory.types.ALERT,\n                title: 'Transferring Marks',\n                body: '<div id=\"error-message-modal-sync\"></div>' + progressbar.outerHTML,\n                buttons: {'cancel': 'Cancel'}\n            });\n\n            await modal.show();\n            let isModalVisible = true;\n            let modalProgressbar = document.getElementById('dashboard-progress-bar-sync');\n\n            // Destroy the modal when it is hidden.\n            modal.getRoot().on(ModalEvents.hidden, () => {\n                modal.destroy();\n                isModalVisible = false;\n            });\n\n            let students = JSON.parse(result.students);\n\n            let studentcount = students.length;\n            let count = 0;\n            let promises = [];\n            for (const student of students) {\n                // Stop the progress if the modal is closed.\n                if (!isModalVisible) {\n                    break;\n                }\n\n                // Transfer mark for each student.\n                let promise = await transferMarkForStudent(assessmentmappingid, student.userid);\n                if (!promise.success) {\n                    // Get general error message.\n                    let generalErrorMessage = promise.message;\n                    let errormessage = document.getElementById('error-message-modal-sync');\n                    errormessage.innerHTML = '<div class=\"alert alert-warning\" role=\"alert\">' + generalErrorMessage + '</div>';\n                }\n\n                promises.push(promise);\n\n                // Increment the count by 1 for each student.\n                count = count + 1;\n\n                // Calculate the progress.\n                let progress = Math.round((count / studentcount) * 100);\n                updateProgressBar(modalProgressbar, progress, true);\n            }\n            await Promise.all(promises);\n            await modal.setButtonText('cancel', 'Close');\n        }\n    }\n\n    // Resume the page update.\n    updatePageIntervalId = setInterval(() => {\n        updateAssessments(globalCourseid);\n    }, updatePageDelay);\n}\n\n/**\n * Show an error message at the table row under the button.\n *\n * @param {HTMLElement} button\n * @param {string} message\n */\nfunction showErrorMessageForButton(button, message) {\n    // Create an error message row.\n    let errormessagerow = document.createElement(\"tr\");\n\n    // Set the class and content of the error message row.\n    errormessagerow.setAttribute(\"class\", \"error-message-row\");\n    errormessagerow.innerHTML =\n        '<td colspan=\"6>\">' +\n        '<div class=\"alert alert-danger\" role=\"alert\">' + message + '</div>' +\n        '</td>';\n\n    // Find the closest row to the button.\n    let currentrow = button.closest(\"tr\");\n\n    // Remove the existing error message row if it exists.\n    if (currentrow.nextElementSibling !== null &&\n        currentrow.nextElementSibling.classList.contains(\"error-message-row\")) {\n        currentrow.nextElementSibling.remove();\n    }\n\n    // Insert the error message row after the current row.\n    currentrow.insertAdjacentElement(\"afterend\", errormessagerow);\n}\n\n/**\n * Display a notification if a success message is available in localStorage.\n */\nfunction displayNotification() {\n    // Retrieve the success message from localStorage.\n    let successMessage = localStorage.getItem('successMessage');\n\n    // Check if a success message is available.\n    if (successMessage) {\n        // Display the success message using a notification library or other means.\n        notification.addNotification({\n            message: successMessage,\n            type: 'success'\n        });\n\n        // Remove the success message from localStorage to avoid showing it again.\n        localStorage.removeItem('successMessage');\n    }\n}\n\n/**\n * Get the scroll position of the page.\n *\n * @param {HTMLElement} page\n * @return {*|number}\n */\nfunction getPagePosition(page) {\n    if (page instanceof Window) {\n        // Get the scroll position of the page.\n        return page.scrollY;\n    } else {\n        // Get the scroll position of the page.\n        return page.scrollTop;\n    }\n}\n"],"names":["updatePageIntervalId","syncThreshold","globalCourseid","async","pushMarks","button","assessmentmappingid","getAttribute","result","success","tooltipid","document","getElementById","remove","showErrorMessageForButton","message","error","window","console","updateAssessments","courseid","update","assessments","JSON","parse","length","assessmentsHasTasks","filter","assessment","task","assessmentIds","Set","map","item","querySelectorAll","forEach","progressBar","has","progressBarId","progress","querySelector","parentNode","insertAdjacentElement","updateProgressBars","pushButton","spinner","innerHTML","outerHTML","disabled","updatePushButtons","updateTasksProgresses","pushButtons","assessmentsHasTransferRecords","transferrecords","icon","classList","contains","replace","updateIcon","clearInterval","errormessagerow","createElement","setAttribute","currentrow","closest","nextElementSibling","getPagePosition","page","Window","scrollY","scrollTop","syncThresholdConfig","asyncConfig","moodleVersion","successMessage","localStorage","getItem","addNotification","type","removeItem","displayNotification","tableSelector","addEventListener","selectedTable","value","pagePosition","offset","scrollPosition","getBoundingClientRect","top","scrollTo","behavior","initModuleDeliverySelector","backToTopButton","style","display","selectedIndex","initBackToTopButton","changesourcebuttons","location","href","initChangeSourceButtons","mabpushbuttons","studentcount","students","progressbar","modal","ModalFactory","create","types","ALERT","title","body","buttons","show","isModalVisible","modalProgressbar","getRoot","on","ModalEvents","hidden","destroy","count","promises","student","promise","userid","generalErrorMessage","push","Math","round","Promise","all","setButtonText","setInterval","syncMarksTransfer","this","initPushMarkButtons","total","then","catch","notification","initPushAllButton"],"mappings":"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"}