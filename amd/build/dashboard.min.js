define("local_sitsgradepush/dashboard",["exports","./sitsgradepush_helper","core/notification"],(function(_exports,_sitsgradepush_helper,_notification){var obj;Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.init=void 0,_notification=(obj=_notification)&&obj.__esModule?obj:{default:obj};let updatePageIntervalId=null,globalCourseid=null;async function pushMarks(assessmentmappingid,recordnonsubmission){try{let result=await(0,_sitsgradepush_helper.schedulePushTask)(assessmentmappingid,recordnonsubmission);result.success&&function(assessmentmappingid){let changeSourceButton=document.getElementById("change-source-button-"+assessmentmappingid);changeSourceButton&&(changeSourceButton.style.display="none");updateMarksColumn([{task:{progress:0},assessmentmappingid:assessmentmappingid,markscount:0,nonsubmittedcount:0}])}(assessmentmappingid);let message="";return!result.success&&result.message&&(message=result.message),function(assessmentmappingid,message){let currentrow=document.getElementById("marks-col-field-"+assessmentmappingid).closest("tr");null!==currentrow.nextElementSibling&&currentrow.nextElementSibling.classList.contains("error-message-row")&&currentrow.nextElementSibling.remove();if(""!==message){let errormessagerow=document.createElement("tr");errormessagerow.setAttribute("class","error-message-row"),errormessagerow.innerHTML='<td colspan="4>"><div class="alert alert-danger" role="alert">'+message+"</div></td>",currentrow.insertAdjacentElement("afterend",errormessagerow)}}(assessmentmappingid,message),result}catch(error){return window.console.error(error),!1}}async function updateAssessments(courseid){let update=await(0,_sitsgradepush_helper.getAssessmentsUpdate)(courseid);if(update.success){let assessments=JSON.parse(update.assessments);assessments.length>0&&updateMarksColumn(assessments)}else clearInterval(updatePageIntervalId),window.console.error(update.message)}function updateMarksColumn(assessments){assessments.forEach((assessment=>{let marksColumnFieldId="marks-col-field-"+assessment.assessmentmappingid,marksColumnField=document.getElementById(marksColumnFieldId);if(marksColumnField){let marksContainer=marksColumnField.querySelector(".marks-container"),taskContainer=marksColumnField.querySelector(".task-status-container");marksColumnField.setAttribute("data-markscount",assessment.markscount),marksColumnField.setAttribute("data-nonsubmittedcount",assessment.nonsubmittedcount),marksColumnField.querySelector(".marks-count").innerHTML=assessment.markscount;let transferButton=marksColumnField.querySelector(".js-btn-transfer-marks");assessment.markscount>0||assessment.nonsubmittedcount>0?transferButton.classList.remove("d-none"):transferButton.classList.add("d-none"),null===assessment.task?(marksColumnField.setAttribute("data-task-running",!1),taskContainer.classList.add("d-none"),marksContainer.classList.remove("d-none")):(marksColumnField.setAttribute("data-task-running",!0),marksContainer.classList.add("d-none"),taskContainer.classList.remove("d-none"),(0,_sitsgradepush_helper.updateProgressBar)(taskContainer,assessment.task.progress))}}))}_exports.init=courseid=>{var page;!function(){let successMessage=localStorage.getItem("successMessage");successMessage&&(_notification.default.addNotification({message:successMessage,type:"success"}),localStorage.removeItem("successMessage"))}(),globalCourseid=courseid,page=window,document.querySelectorAll(".jump-to-dropdown-item").forEach((function(item){item.addEventListener("click",(function(){let value=item.getAttribute("data-value");if(null!==value){let pagePosition=function(page){return page instanceof Window?page.scrollY:page.scrollTop}(page),selectedTable=document.getElementById(value);if(selectedTable){let offset=-100,scrollPosition=pagePosition+selectedTable.getBoundingClientRect().top+offset;page.scrollTo({top:scrollPosition,behavior:"smooth"})}}}))})),function(courseid){updateAssessments(courseid),updatePageIntervalId=setInterval((()=>{updateAssessments(courseid)}),15e3),document.addEventListener("visibilitychange",(function(){"hidden"===document.visibilityState?clearInterval(updatePageIntervalId):(updateAssessments(courseid),updatePageIntervalId=setInterval((()=>{updateAssessments(courseid)}),15e3))}))}(courseid),function(page){let confirmTransferButton=document.getElementById("js-transfer-modal-button");if(null===confirmTransferButton)return;confirmTransferButton.addEventListener("click",(async function(){let assessmentmappingid=confirmTransferButton.getAttribute("data-assessmentmappingid"),recordnonsubmission=document.getElementById("recordnonsubmission").checked;null!==assessmentmappingid&&"all"!==assessmentmappingid?await pushMarks(assessmentmappingid,recordnonsubmission):"all"===assessmentmappingid&&await async function(page,recordnonsubmission){let assessmentmappings=Array.from(document.querySelectorAll(".marks-col-field")).filter((element=>{let marksCount=parseInt(element.getAttribute("data-markscount"),10),nonSubmittedCount=parseInt(element.getAttribute("data-nonsubmittedcount"),10),taskRunning="true"===element.getAttribute("data-task-running");return(0!==marksCount||0!==nonSubmittedCount)&&(recordnonsubmission?(marksCount>0||nonSubmittedCount>0)&&!taskRunning:marksCount>0&&!taskRunning)})),total=assessmentmappings.length,count=0,promises=[];assessmentmappings.forEach((function(element){let promise=pushMarks(element.getAttribute("data-assessmentmappingid"),recordnonsubmission).then((function(result){return result.success&&(count+=1),result})).catch((function(error){window.console.error(error)}));promises.push(promise)})),await Promise.all(promises),page.scrollTo({top:0,behavior:"instant"}),await _notification.default.addNotification({message:count+" of "+total+" push tasks have been scheduled.",type:count===total?"success":"warning"}),updateAssessments(globalCourseid)}(page,recordnonsubmission)}))}(window)}}));

//# sourceMappingURL=dashboard.min.js.map