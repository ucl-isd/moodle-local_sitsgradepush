define("local_sitsgradepush/dashboard",["exports","./sitsgradepush_helper","./progress","core/notification","core/modal_factory","core/modal_events"],(function(_exports,_sitsgradepush_helper,_progress,_notification,_modal_factory,_modal_events){function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.init=void 0,_notification=_interopRequireDefault(_notification),_modal_factory=_interopRequireDefault(_modal_factory),_modal_events=_interopRequireDefault(_modal_events);let updatePageIntervalId=null,syncThreshold=30,globalCourseid=null,async=null;async function pushMarks(button){try{let assessmentmappingid=button.getAttribute("data-assessmentmappingid"),result=await(0,_sitsgradepush_helper.schedulePushTask)(assessmentmappingid);if(result.success){let tooltipid=button.getAttribute("aria-describedby");null!==tooltipid&&null!==document.getElementById(tooltipid)&&document.getElementById(tooltipid).remove()}else showErrorMessageForButton(button,result.message);return result}catch(error){return window.console.error(error),!1}}async function updateAssessments(courseid){let update=await(0,_sitsgradepush_helper.getAssessmentsUpdate)(courseid);if(update.success){let assessments=JSON.parse(update.assessments);assessments.length>0&&(function(assessments){let assessmentsHasTasks=assessments.filter((assessment=>null!==assessment.task)),assessmentIds=new Set(assessmentsHasTasks.map((item=>item.assessmentmappingid)));(function(assessmentsHasTasks,assessmentIds){document.querySelectorAll(".progress.async").forEach((progressBar=>{assessmentIds.has(progressBar.getAttribute("data-assessmentmappingid"))||progressBar.remove()})),assessmentsHasTasks.forEach((assessment=>{let progressBarId="progress-bar-"+assessment.task.assessmentmappingid,progressBar=document.getElementById(progressBarId),task=assessment.task;if(progressBar)(0,_progress.updateProgressBar)(progressBar,task.progress);else{progressBar=(0,_progress.createProgressBar)(progressBarId,"async",task.assessmentmappingid,task.progress),document.querySelector('.push-mark-button[data-assessmentmappingid="'+task.assessmentmappingid+'"]').parentNode.parentNode.insertAdjacentElement("afterend",progressBar)}}))})(assessmentsHasTasks,assessmentIds),function(assessmentIds){document.querySelectorAll(".push-mark-button").forEach((function(pushButton){let assessmentmappingid=pushButton.getAttribute("data-assessmentmappingid");if(assessmentIds.has(assessmentmappingid)){let spinner=(0,_progress.createSpinner)("text-light","spinner-border-sm");pushButton.innerHTML=spinner.outerHTML,pushButton.disabled=!0}else null!==assessmentmappingid?(pushButton.innerHTML='<i class="fa-solid fa-upload"></i>',pushButton.disabled=!1):pushButton.disabled=!0}))}(assessmentIds)}(assessments),function(assessments){let pushButtons=document.querySelectorAll(".push-mark-button"),assessmentsHasTransferRecords=assessments.filter((update=>1===update.transferrecords)),assessmentIds=new Set(assessmentsHasTransferRecords.map((assessment=>assessment.assessmentmappingid)));pushButtons.forEach((function(button){let assessmentmappingid=button.getAttribute("data-assessmentmappingid"),icon=button.parentNode.parentNode.querySelector(".records-icon");assessmentIds.has(assessmentmappingid)?icon.classList.contains("fa-circle-info")&&(icon.classList.replace("fa-solid","fa-regular"),icon.classList.replace("fa-circle-info","fa-file-lines")):icon.classList.contains("fa-file-lines")&&(icon.classList.replace("fa-regular","fa-solid"),icon.classList.replace("fa-file-lines","fa-circle-info"))}))}(assessments))}else clearInterval(updatePageIntervalId),window.console.error(update.message)}function showErrorMessageForButton(button,message){let errormessagerow=document.createElement("tr");errormessagerow.setAttribute("class","error-message-row"),errormessagerow.innerHTML='<td colspan="6>"><div class="alert alert-danger" role="alert">'+message+"</div></td>";let currentrow=button.closest("tr");null!==currentrow.nextElementSibling&&currentrow.nextElementSibling.classList.contains("error-message-row")&&currentrow.nextElementSibling.remove(),currentrow.insertAdjacentElement("afterend",errormessagerow)}function getPagePosition(page){return page instanceof Window?page.scrollY:page.scrollTop}_exports.init=(courseid,syncThresholdConfig,asyncConfig,moodleVersion)=>{let page;!function(){let successMessage=localStorage.getItem("successMessage");successMessage&&(_notification.default.addNotification({message:successMessage,type:"success"}),localStorage.removeItem("successMessage"))}(),syncThreshold=syncThresholdConfig,globalCourseid=courseid,async=asyncConfig,page=moodleVersion>"2023100900"?window:document.getElementById("page");let tableSelector=function(page){let tableSelector=document.getElementById("module-delivery-selector");return tableSelector.addEventListener("change",(function(){let selectedTable=document.getElementById(tableSelector.value),pagePosition=getPagePosition(page);if(selectedTable){let offset=-100,scrollPosition=pagePosition+selectedTable.getBoundingClientRect().top+offset;page.scrollTo({top:scrollPosition,behavior:"smooth"})}})),tableSelector}(page);!function(page,tableSelector){let backToTopButton=document.getElementById("backToTopButton");page.addEventListener("scroll",(function(){getPagePosition(page)>=100?backToTopButton.style.display="block":backToTopButton.style.display="none"})),backToTopButton.addEventListener("click",(function(){page.scrollTo({top:0,behavior:"smooth"}),tableSelector.selectedIndex=0}))}(page,tableSelector),function(){let changesourcebuttons=document.querySelectorAll(".change-source-button:not([disabled])");changesourcebuttons.length>0&&changesourcebuttons.forEach((function(button){button.addEventListener("click",(function(){window.location.href=button.getAttribute("data-url")}))}))}(),function(page,courseid){let mabpushbuttons=document.querySelectorAll(".push-mark-button");mabpushbuttons.length>0&&mabpushbuttons.forEach((function(button){let studentcount=button.getAttribute("data-numberofstudents"),assessmentmappingid=button.getAttribute("data-assessmentmappingid");null!==assessmentmappingid?button.addEventListener("click",(async function(){if("0"!==studentcount)if(studentcount>0&&studentcount<syncThreshold||"0"===async)await async function(assessmentmappingid){clearInterval(updatePageIntervalId);let result=await(0,_sitsgradepush_helper.getTransferStudents)(assessmentmappingid);if(result.success&&result.students.length>0){let progressbar=(0,_progress.createProgressBar)("dashboard-progress-bar-sync","sync",assessmentmappingid,0,!0),modal=await _modal_factory.default.create({type:_modal_factory.default.types.ALERT,title:"Transferring Marks",body:'<div id="error-message-modal-sync"></div>'+progressbar.outerHTML,buttons:{cancel:"Cancel"}});await modal.show();let isModalVisible=!0,modalProgressbar=document.getElementById("dashboard-progress-bar-sync");modal.getRoot().on(_modal_events.default.hidden,(()=>{modal.destroy(),isModalVisible=!1}));let students=JSON.parse(result.students),studentcount=students.length,count=0,promises=[];for(const student of students){if(!isModalVisible)break;let promise=await(0,_sitsgradepush_helper.transferMarkForStudent)(assessmentmappingid,student.userid);if(!promise.success){let generalErrorMessage=promise.message;document.getElementById("error-message-modal-sync").innerHTML='<div class="alert alert-warning" role="alert">'+generalErrorMessage+"</div>"}promises.push(promise),count+=1;let progress=Math.round(count/studentcount*100);(0,_progress.updateProgressBar)(modalProgressbar,progress,!0)}await Promise.all(promises),await modal.setButtonText("cancel","Close")}updatePageIntervalId=setInterval((()=>{updateAssessments(globalCourseid)}),15e3)}(assessmentmappingid);else{(await pushMarks(this)).success&&updateAssessments(courseid)}else showErrorMessageForButton(button,"There are no marks to transfer.")})):button.disabled=!0}))}(0,courseid),function(page,courseid){document.getElementById("push-all-button").addEventListener("click",(async function(){let mabpushbuttons=document.querySelectorAll(".push-mark-button:not([disabled])[data-assessmentmappingid]"),total=mabpushbuttons.length,count=0,promises=[];mabpushbuttons.forEach((function(button){let promise=pushMarks(button).then((function(result){return result.success&&(count+=1),result})).catch((function(error){window.console.error(error)}));promises.push(promise)})),await Promise.all(promises),page.scrollTo({top:0,behavior:"instant"}),await _notification.default.addNotification({message:count+" of "+total+" push tasks have been scheduled.",type:count===total?"success":"warning"}),updateAssessments(courseid)}))}(page,courseid),updateAssessments(courseid),updatePageIntervalId=setInterval((()=>{updateAssessments(courseid)}),15e3),document.addEventListener("visibilitychange",(function(){"hidden"===document.visibilityState?clearInterval(updatePageIntervalId):(updateAssessments(courseid),updatePageIntervalId=setInterval((()=>{updateAssessments(courseid)}),15e3))}))}}));

//# sourceMappingURL=dashboard.min.js.map