{"version":3,"file":"sitsgradepush_helper.min.js","sources":["../src/sitsgradepush_helper.js"],"sourcesContent":["import Ajax from 'core/ajax';\n\n/**\n * Schedule a task to push grades to SITS.\n *\n * @param {int} assessmentmappingid The assessment mapping ID.\n * @param {boolean} recordnonsubmission Record non-submission.\n * @return {Promise} Promise.\n */\nexport const schedulePushTask = async(assessmentmappingid, recordnonsubmission = false) => {\n    return new Promise((resolve, reject) => {\n        Ajax.call([{\n            methodname: 'local_sitsgradepush_schedule_push_task',\n            args: {\n                'assessmentmappingid': assessmentmappingid,\n                'recordnonsubmission': recordnonsubmission,\n            },\n        }])[0].done(function(response) {\n            resolve(response);\n        }).fail(function(err) {\n            window.console.log(err);\n            reject(err);\n        });\n    });\n};\n\n/**\n * Map an assessment to a component grade.\n *\n * @param {int} courseid\n * @param {string} sourcetype\n * @param {int} sourceid\n * @param {int} mabid\n * @param {int} reassess\n * @param {int|null} partid\n * @return {Promise}\n */\nexport const mapAssessment = async(courseid, sourcetype, sourceid, mabid, reassess, partid = null) => {\n    return new Promise((resolve, reject) => {\n        Ajax.call([{\n            methodname: 'local_sitsgradepush_map_assessment',\n            args: {\n                'courseid': courseid,\n                'sourcetype': sourcetype,\n                'sourceid': sourceid,\n                'mabid': mabid,\n                'reassess': reassess,\n                'partid': partid,\n            },\n        }])[0].done(function(response) {\n            resolve(response);\n        }).fail(function(err) {\n            window.console.log(err);\n            reject(err);\n        });\n    });\n};\n\n/**\n * Get the latest information about the assessment mappings of a course.\n * For updating the dashboard page and activity marks transfer page.\n *\n * @param {int} courseid\n * @param {string} sourcetype\n * @param {int} sourceid\n * @return {Promise<unknown>}\n */\nexport const getAssessmentsUpdate = async(courseid, sourcetype = '', sourceid = 0) => {\n    return new Promise((resolve, reject) => {\n        Ajax.call([{\n            methodname: 'local_sitsgradepush_get_assessments_update',\n            args: {\n                'courseid': courseid,\n                'sourcetype': sourcetype,\n                'sourceid': sourceid,\n            },\n        }])[0].done(function(response) {\n            resolve(response);\n        }).fail(function(err) {\n            window.console.log(err);\n            reject(err);\n        });\n    });\n};\n\n/**\n * Update the progress bar.\n *\n * @param {HTMLElement} container\n * @param {int} progress\n * @return {void}\n */\nexport const updateProgressBar = (container, progress) => {\n    // Get the progress bar.\n    let progressLabel = container.querySelector('small');\n    let progressBar = container.querySelector('.progress-bar');\n\n    if (progressLabel && progressBar) {\n        if (progress === null) {\n            progress = 0;\n        }\n        // Update the progress bar.\n        progressLabel.innerHTML = 'Progress: ' + progress + '%';\n        progressBar.setAttribute('aria-valuenow', progress);\n        progressBar.style.width = progress + '%';\n    }\n};\n\n/**\n * Remove a mapping from the dashboard page.\n *\n * @param {int} courseid The course ID.\n * @param {int} assessmentmappingid The assessment mapping ID.\n * @return {Promise}\n */\nexport function removeMapping(courseid, assessmentmappingid) {\n    return new Promise((resolve, reject) => {\n        Ajax.call([{\n            methodname: 'local_sitsgradepush_remove_mapping',\n            args: {\n                'courseid': courseid,\n                'assessmentmappingid': assessmentmappingid,\n            },\n        }])[0].done(function(response) {\n            resolve(response);\n        }).fail(function(err) {\n            window.console.error(err);\n            reject(err);\n        });\n    });\n}\n"],"names":["courseid","assessmentmappingid","Promise","resolve","reject","call","methodname","args","done","response","fail","err","window","console","error","async","recordnonsubmission","log","sourcetype","sourceid","mabid","reassess","partid","container","progress","progressLabel","querySelector","progressBar","innerHTML","setAttribute","style","width"],"mappings":"gQAmH8BA,SAAUC,4BAC7B,IAAIC,SAAQ,CAACC,QAASC,wBACpBC,KAAK,CAAC,CACPC,WAAY,qCACZC,KAAM,UACUP,6BACWC,wBAE3B,GAAGO,MAAK,SAASC,UACjBN,QAAQM,aACTC,MAAK,SAASC,KACbC,OAAOC,QAAQC,MAAMH,KACrBP,OAAOO,sJAtHaI,eAAMd,yBAAqBe,mFAChD,IAAId,SAAQ,CAACC,QAASC,wBACpBC,KAAK,CAAC,CACPC,WAAY,yCACZC,KAAM,qBACqBN,wCACAe,wBAE3B,GAAGR,MAAK,SAASC,UACjBN,QAAQM,aACTC,MAAK,SAASC,KACbC,OAAOC,QAAQI,IAAIN,KACnBP,OAAOO,mCAgBUI,eAAMf,SAAUkB,WAAYC,SAAUC,MAAOC,cAAUC,8DAAS,YAClF,IAAIpB,SAAQ,CAACC,QAASC,wBACpBC,KAAK,CAAC,CACPC,WAAY,qCACZC,KAAM,UACUP,oBACEkB,oBACFC,eACHC,eACGC,gBACFC,WAEd,GAAGd,MAAK,SAASC,UACjBN,QAAQM,aACTC,MAAK,SAASC,KACbC,OAAOC,QAAQI,IAAIN,KACnBP,OAAOO,0CAciBI,eAAMf,cAAUkB,kEAAa,GAAIC,gEAAW,SACrE,IAAIjB,SAAQ,CAACC,QAASC,wBACpBC,KAAK,CAAC,CACPC,WAAY,6CACZC,KAAM,UACUP,oBACEkB,oBACFC,aAEhB,GAAGX,MAAK,SAASC,UACjBN,QAAQM,aACTC,MAAK,SAASC,KACbC,OAAOC,QAAQI,IAAIN,KACnBP,OAAOO,uCAYc,CAACY,UAAWC,gBAErCC,cAAgBF,UAAUG,cAAc,SACxCC,YAAcJ,UAAUG,cAAc,iBAEtCD,eAAiBE,cACA,OAAbH,WACAA,SAAW,GAGfC,cAAcG,UAAY,aAAeJ,SAAW,IACpDG,YAAYE,aAAa,gBAAiBL,UAC1CG,YAAYG,MAAMC,MAAQP,SAAW"}