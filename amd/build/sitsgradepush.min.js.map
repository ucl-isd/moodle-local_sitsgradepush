{"version":3,"file":"sitsgradepush.min.js","sources":["../src/sitsgradepush.js"],"sourcesContent":["import {schedulePushTask, getAssessmentsUpdate, updateProgressBar} from \"./sitsgradepush_helper\";\nimport notification from 'core/notification';\n\nlet updatePageIntervalId = null; // The interval ID for updating the progress.\nlet updatePageDelay = 15000; // The delay for updating the page.\n\n/**\n * Initialize the course module marks transfer page (index.php).\n *\n * @param {int} courseid\n * @param {int} coursemoduleid\n */\nexport const init = (courseid, coursemoduleid) => {\n    // Initialize page update tasks.\n    initPageUpdate(courseid, coursemoduleid);\n\n    // Initialize the confirmation modal.\n    initConfirmationModal(courseid, coursemoduleid);\n};\n\n/**\n * Initialize page update on course module marks transfer page (index.php).\n *\n * @param {int} courseid\n * @param {int} coursemoduleid\n */\nfunction initPageUpdate(courseid, coursemoduleid) {\n    // Update the tasks progresses.\n    updateTasksInfo(courseid, coursemoduleid);\n\n    // Update the tasks progresses every 15 seconds.\n    updatePageIntervalId = setInterval(() => {\n        updateTasksInfo(courseid, coursemoduleid);\n    }, updatePageDelay);\n\n    // Add event listener to stop update the page when the page is not visible. e.g. when the user switches to another tab.\n    document.addEventListener(\"visibilitychange\", function() {\n        if (document.visibilityState === \"hidden\") {\n            clearInterval(updatePageIntervalId);\n        } else {\n            updateTasksInfo(courseid, coursemoduleid);\n            updatePageIntervalId = setInterval(() => {\n                updateTasksInfo(courseid, coursemoduleid);\n            }, updatePageDelay);\n        }\n    });\n}\n\n/**\n * Initialize the confirmation modal.\n *\n * @param {int} courseid\n * @param {int} coursemoduleid\n */\nfunction initConfirmationModal(courseid, coursemoduleid) {\n    // Find the confirmation modal.\n    let confirmTransferButton = document.getElementById(\"js-transfer-modal-button\");\n\n    // Exit if the confirmation modal is not found.\n    if (confirmTransferButton === null) {\n        window.console.log(\"Confirmation modal not found.\");\n        return;\n    }\n\n    // Add event listener to the confirmation modal.\n    confirmTransferButton.addEventListener(\"click\", async function() {\n        // Check if it is an async push button.\n        let async = confirmTransferButton.getAttribute('data-async');\n        if (async === \"1\") {\n            let promises = [];\n\n            // Find all valid assessment mapping IDs.\n            let mappingtables = document.querySelectorAll('.sitsgradepush-history-table');\n\n            // Number of assessment mappings.\n            let total = mappingtables.length - 1; // Exclude the invalid students table.\n            let count = 0;\n\n            // Schedule a task to push grades to SITS for each assessment mapping.\n            mappingtables.forEach(function(table) {\n                let mappingid = table.getAttribute('data-assessmentmappingid');\n                let markscount = table.getAttribute('data-markscount');\n                if (mappingid !== null && markscount > 0) {\n                    let promise = schedulePushTask(mappingid)\n                        .then(function(result) {\n                            if (result.success) {\n                                count = count + 1;\n                            } else {\n                                // Create an error message row.\n                                let errormessageid = \"error-message-\" + mappingid;\n                                let errormessagerow = document.createElement(\"div\");\n                                errormessagerow.setAttribute(\"id\", errormessageid);\n                                errormessagerow.setAttribute(\"class\", \"error-message-row\");\n                                errormessagerow.innerHTML =\n                                    '<div class=\"alert alert-danger\" role=\"alert\">' + result.message + '</div>';\n\n                                // Find the closest row to the assessment mapping.\n                                let currentrow = document.getElementById(errormessageid);\n\n                                // Remove the error message row if it exists.\n                                if (currentrow !== null) {\n                                    currentrow.remove();\n                                }\n\n                                // Insert the error message above the table.\n                                table.parentNode.insertBefore(errormessagerow, table);\n                            }\n                            return result.success;\n                        })\n                        .catch(function(error) {\n                            window.console.error(error);\n                        });\n\n                    promises.push(promise);\n                }\n            });\n\n            // Wait for all the push tasks to be scheduled.\n            await Promise.all(promises);\n\n            // Update the page.\n            await updateTasksInfo(courseid, coursemoduleid);\n\n            // Display a notification.\n            await notification.addNotification({\n                message: count + ' of ' + total + ' push tasks have been scheduled.',\n                type: (count === total) ? 'success' : 'warning'\n            });\n        } else {\n            // Redirect to the legacy synchronous push page.\n            // Will improve it when we have a more concrete plan for the sync push.\n            window.location.href = '/local/sitsgradepush/index.php?id=' + coursemoduleid + '&pushgrade=1';\n        }\n    });\n}\n\n/**\n * Update all marks transfer tasks information, e.g. progress bars.\n *\n * @param {int} courseid\n * @param {int} coursemoduleid\n * @return {void}\n */\nasync function updateTasksInfo(courseid, coursemoduleid) {\n    // Get all latest tasks statuses.\n    let update = await getAssessmentsUpdate(courseid, coursemoduleid);\n    if (update.success) {\n        // Parse the JSON string.\n        let assessments = JSON.parse(update.assessments);\n        if (assessments.length > 0) {\n            // Update the progress bars.\n            updateProgress(assessments);\n        } else {\n            clearInterval(updatePageIntervalId);\n        }\n    } else {\n        // Stop updating the tasks information if there is an error getting the updated tasks information.\n        clearInterval(updatePageIntervalId);\n        window.console.error(update.message);\n    }\n}\n\n/**\n * Update the progress bars.\n *\n * @param {object[]} assessments\n */\nfunction updateProgress(assessments) {\n    assessments.forEach(assessment => {\n        let progressContainer = document.getElementById('progress-container-' + assessment.assessmentmappingid);\n        if (!progressContainer) {\n            window.console.log('Progress container not found for assessment mapping ID: ' + assessment.assessmentmappingid);\n            return;\n        }\n        let pushbutton = document.getElementById('push-all-button');\n        if (assessment.task === null) {\n            // Enable the push button if there is no task running.\n            if (pushbutton) {\n                pushbutton.disabled = false;\n            }\n            // Hide the progress container if there is no task in progress.\n            progressContainer.style.display = 'none';\n        } else {\n            if (pushbutton) {\n                pushbutton.disabled = true;\n            }\n            progressContainer.style.display = 'block';\n            updateProgressBar(progressContainer, assessment.task.progress);\n        }\n    });\n}\n"],"names":["updatePageIntervalId","updateTasksInfo","courseid","coursemoduleid","update","success","assessments","JSON","parse","length","forEach","assessment","progressContainer","document","getElementById","assessmentmappingid","window","console","log","pushbutton","task","disabled","style","display","progress","updateProgress","clearInterval","error","message","setInterval","addEventListener","visibilityState","initPageUpdate","confirmTransferButton","async","getAttribute","promises","mappingtables","querySelectorAll","total","count","table","mappingid","markscount","promise","then","result","errormessageid","errormessagerow","createElement","setAttribute","innerHTML","currentrow","remove","parentNode","insertBefore","catch","push","Promise","all","notification","addNotification","type","location","href","initConfirmationModal"],"mappings":"yTAGIA,qBAAuB,oBA4IZC,gBAAgBC,SAAUC,oBAEjCC,aAAe,8CAAqBF,SAAUC,mBAC9CC,OAAOC,QAAS,KAEZC,YAAcC,KAAKC,MAAMJ,OAAOE,aAChCA,YAAYG,OAAS,WAkBTH,aACpBA,YAAYI,SAAQC,iBACZC,kBAAoBC,SAASC,eAAe,sBAAwBH,WAAWI,yBAC9EH,8BACDI,OAAOC,QAAQC,IAAI,2DAA6DP,WAAWI,yBAG3FI,WAAaN,SAASC,eAAe,mBACjB,OAApBH,WAAWS,MAEPD,aACAA,WAAWE,UAAW,GAG1BT,kBAAkBU,MAAMC,QAAU,SAE9BJ,aACAA,WAAWE,UAAW,GAE1BT,kBAAkBU,MAAMC,QAAU,oDAChBX,kBAAmBD,WAAWS,KAAKI,cApCrDC,CAAenB,aAEfoB,cAAc1B,2BAIlB0B,cAAc1B,sBACdgB,OAAOC,QAAQU,MAAMvB,OAAOwB,uBAlJhB,CAAC1B,SAAUC,4BAcPD,SAAUC,gBAE9BF,gBAAgBC,SAAUC,gBAG1BH,qBAAuB6B,aAAY,KAC/B5B,gBAAgBC,SAAUC,kBA5BZ,MAgClBU,SAASiB,iBAAiB,oBAAoB,WACT,WAA7BjB,SAASkB,gBACTL,cAAc1B,uBAEdC,gBAAgBC,SAAUC,gBAC1BH,qBAAuB6B,aAAY,KAC/B5B,gBAAgBC,SAAUC,kBAtCpB,UAUlB6B,CAAe9B,SAAUC,yBAwCED,SAAUC,oBAEjC8B,sBAAwBpB,SAASC,eAAe,+BAGtB,OAA1BmB,kCACAjB,OAAOC,QAAQC,IAAI,iCAKvBe,sBAAsBH,iBAAiB,SAASI,oBAG9B,MADFD,sBAAsBE,aAAa,cAC5B,KACXC,SAAW,GAGXC,cAAgBxB,SAASyB,iBAAiB,gCAG1CC,MAAQF,cAAc5B,OAAS,EAC/B+B,MAAQ,EAGZH,cAAc3B,SAAQ,SAAS+B,WACvBC,UAAYD,MAAMN,aAAa,4BAC/BQ,WAAaF,MAAMN,aAAa,sBAClB,OAAdO,WAAsBC,WAAa,EAAG,KAClCC,SAAU,0CAAiBF,WAC1BG,MAAK,SAASC,WACPA,OAAOzC,QACPmC,OAAgB,MACb,KAECO,eAAiB,iBAAmBL,UACpCM,gBAAkBnC,SAASoC,cAAc,OAC7CD,gBAAgBE,aAAa,KAAMH,gBACnCC,gBAAgBE,aAAa,QAAS,qBACtCF,gBAAgBG,UACZ,gDAAkDL,OAAOlB,QAAU,aAGnEwB,WAAavC,SAASC,eAAeiC,gBAGtB,OAAfK,YACAA,WAAWC,SAIfZ,MAAMa,WAAWC,aAAaP,gBAAiBP,cAE5CK,OAAOzC,WAEjBmD,OAAM,SAAS7B,OACZX,OAAOC,QAAQU,MAAMA,UAG7BS,SAASqB,KAAKb,mBAKhBc,QAAQC,IAAIvB,gBAGZnC,gBAAgBC,SAAUC,sBAG1ByD,sBAAaC,gBAAgB,CAC/BjC,QAASY,MAAQ,OAASD,MAAQ,mCAClCuB,KAAOtB,QAAUD,MAAS,UAAY,iBAK1CvB,OAAO+C,SAASC,KAAO,qCAAuC7D,eAAiB,kBAlHvF8D,CAAsB/D,SAAUC"}