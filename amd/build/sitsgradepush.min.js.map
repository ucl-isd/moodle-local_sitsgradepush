{"version":3,"file":"sitsgradepush.min.js","sources":["../src/sitsgradepush.js"],"sourcesContent":["import {getAssessmentsUpdate, schedulePushTask, updateProgressBar} from \"./sitsgradepush_helper\";\nimport notification from 'core/notification';\n\nlet updatePageIntervalId = null; // The interval ID for updating the progress.\nlet updatePageDelay = 15000; // The delay for updating the page.\nlet taskRunning = false;\nlet shouldRefresh = false;\n\n/**\n * Initialize the course module marks transfer page (index.php).\n *\n * @param {int} courseid\n * @param {int} coursemoduleid\n */\nexport const init = (courseid, coursemoduleid) => {\n    // Initialize page update tasks.\n    initPageUpdate(courseid, coursemoduleid);\n\n    // Initialize the confirmation modal.\n    initConfirmationModal(courseid, coursemoduleid);\n};\n\n/**\n * Initialize page update on course module marks transfer page (index.php).\n *\n * @param {int} courseid\n * @param {int} coursemoduleid\n */\nfunction initPageUpdate(courseid, coursemoduleid) {\n    // Update the tasks progresses.\n    updateTasksInfo(courseid, coursemoduleid);\n\n    // Update the tasks progresses every 15 seconds.\n    updatePageIntervalId = setInterval(() => {\n        updateTasksInfo(courseid, coursemoduleid);\n    }, updatePageDelay);\n\n    // Add event listener to stop update the page when the page is not visible. e.g. when the user switches to another tab.\n    document.addEventListener(\"visibilitychange\", function() {\n        if (document.visibilityState === \"hidden\") {\n            clearInterval(updatePageIntervalId);\n        } else {\n            updateTasksInfo(courseid, coursemoduleid);\n            updatePageIntervalId = setInterval(() => {\n                updateTasksInfo(courseid, coursemoduleid);\n            }, updatePageDelay);\n        }\n    });\n}\n\n/**\n * Initialize the confirmation modal.\n *\n * @param {int} courseid\n * @param {int} coursemoduleid\n */\nfunction initConfirmationModal(courseid, coursemoduleid) {\n    // Find the confirmation modal.\n    let confirmTransferButton = document.getElementById(\"js-transfer-modal-button\");\n\n    // Exit if the confirmation modal is not found.\n    if (confirmTransferButton === null) {\n        window.console.log(\"Confirmation modal not found.\");\n        return;\n    }\n\n    // Add event listener to the confirmation modal.\n    confirmTransferButton.addEventListener(\"click\", async function() {\n        let promises = [];\n\n        // Find all valid assessment mapping IDs.\n        let mappingtables = document.querySelectorAll('.sitsgradepush-history-table');\n\n        // Number of assessment mappings.\n        let total = mappingtables.length - 1; // Exclude the invalid students table.\n        let count = 0;\n\n        // Schedule a task to push grades to SITS for each assessment mapping.\n        mappingtables.forEach(function(table) {\n            let mappingid = table.getAttribute('data-assessmentmappingid');\n            let markscount = table.getAttribute('data-markscount');\n            if (mappingid !== null && markscount > 0) {\n                let promise = schedulePushTask(mappingid)\n                    .then(function(result) {\n                        if (result.success) {\n                            count = count + 1;\n                        } else {\n                            // Create an error message row.\n                            let errormessageid = \"error-message-\" + mappingid;\n                            let errormessagerow = document.createElement(\"div\");\n                            errormessagerow.setAttribute(\"id\", errormessageid);\n                            errormessagerow.setAttribute(\"class\", \"error-message-row\");\n                            errormessagerow.innerHTML =\n                                '<div class=\"alert alert-danger\" role=\"alert\">' + result.message + '</div>';\n\n                            // Find the closest row to the assessment mapping.\n                            let currentrow = document.getElementById(errormessageid);\n\n                            // Remove the error message row if it exists.\n                            if (currentrow !== null) {\n                                currentrow.remove();\n                            }\n\n                            // Insert the error message above the table.\n                            table.parentNode.insertBefore(errormessagerow, table);\n                        }\n                        return result.success;\n                    })\n                    .catch(function(error) {\n                        window.console.error(error);\n                    });\n\n                promises.push(promise);\n            }\n        });\n\n        // Wait for all the push tasks to be scheduled.\n        await Promise.all(promises);\n\n        // Update the page.\n        await updateTasksInfo(courseid, coursemoduleid);\n\n        // Display a notification.\n        await notification.addNotification({\n            message: count + ' of ' + total + ' push tasks have been scheduled.',\n            type: (count === total) ? 'success' : 'warning'\n        });\n    });\n}\n\n/**\n * Update all marks transfer tasks information, e.g. progress bars.\n *\n * @param {int} courseid\n * @param {int} coursemoduleid\n * @return {void}\n */\nasync function updateTasksInfo(courseid, coursemoduleid) {\n    // Get all latest tasks statuses.\n    let update = await getAssessmentsUpdate(courseid, coursemoduleid);\n    if (update.success) {\n        // Parse the JSON string.\n        let assessments = JSON.parse(update.assessments);\n        if (assessments.length > 0) {\n            // Update the progress bars.\n            updateProgress(assessments);\n        } else {\n            clearInterval(updatePageIntervalId);\n        }\n    } else {\n        // Stop updating the tasks information if there is an error getting the updated tasks information.\n        clearInterval(updatePageIntervalId);\n        window.console.error(update.message);\n    }\n}\n\n/**\n * Update the progress bars.\n *\n * @param {object[]} assessments\n */\nfunction updateProgress(assessments) {\n    // Check if there is any running task.\n    taskRunning = hasRunningTask(assessments);\n\n    // If there is any running task, mark page should be refreshed.\n    if (taskRunning) {\n        shouldRefresh = true;\n    }\n\n    // Refresh the page if there is no running task and should be refreshed.\n    if (shouldRefresh && !taskRunning) {\n        shouldRefresh = false;\n        location.reload();\n    }\n\n    // Get the push button element.\n    let pushbutton = document.getElementById('push-all-button');\n    if (pushbutton) {\n        // Disable the push button if there is any running task, otherwise enable it.\n        pushbutton.disabled = taskRunning;\n    } else {\n        window.console.log('Push button not found');\n    }\n\n    assessments.forEach(assessment => {\n        let progressContainer = document.getElementById('progress-container-' + assessment.assessmentmappingid);\n        if (!progressContainer) {\n            window.console.log('Progress container not found for assessment mapping ID: ' + assessment.assessmentmappingid);\n            return;\n        }\n        if (assessment.task === null) {\n            // Hide the progress container if there is no task in progress.\n            progressContainer.style.display = 'none';\n        } else {\n            progressContainer.style.display = 'block';\n            updateProgressBar(progressContainer, assessment.task.progress);\n        }\n    });\n}\n\n/**\n * Check if there is a running task.\n *\n * @param {object[]} assessments\n * @return {boolean}\n */\nfunction hasRunningTask(assessments) {\n    for (let i = 0; i < assessments.length; i++) {\n        if (assessments[i].task !== null) {\n            return true;\n        }\n    }\n    return false;\n}\n"],"names":["updatePageIntervalId","taskRunning","shouldRefresh","updateTasksInfo","courseid","coursemoduleid","update","success","assessments","JSON","parse","length","i","task","hasRunningTask","location","reload","pushbutton","document","getElementById","disabled","window","console","log","forEach","assessment","progressContainer","assessmentmappingid","style","display","progress","updateProgress","clearInterval","error","message","setInterval","addEventListener","visibilityState","initPageUpdate","confirmTransferButton","async","promises","mappingtables","querySelectorAll","total","count","table","mappingid","getAttribute","markscount","promise","then","result","errormessageid","errormessagerow","createElement","setAttribute","innerHTML","currentrow","remove","parentNode","insertBefore","catch","push","Promise","all","notification","addNotification","type","initConfirmationModal"],"mappings":"yTAGIA,qBAAuB,KAEvBC,aAAc,EACdC,eAAgB,iBAmILC,gBAAgBC,SAAUC,oBAEjCC,aAAe,8CAAqBF,SAAUC,mBAC9CC,OAAOC,QAAS,KAEZC,YAAcC,KAAKC,MAAMJ,OAAOE,aAChCA,YAAYG,OAAS,WAkBTH,aAEpBP,qBA4CoBO,iBACf,IAAII,EAAI,EAAGA,EAAIJ,YAAYG,OAAQC,OACR,OAAxBJ,YAAYI,GAAGC,YACR,SAGR,EAlDOC,CAAeN,aAGzBP,cACAC,eAAgB,GAIhBA,gBAAkBD,cAClBC,eAAgB,EAChBa,SAASC,cAITC,WAAaC,SAASC,eAAe,mBACrCF,WAEAA,WAAWG,SAAWnB,YAEtBoB,OAAOC,QAAQC,IAAI,yBAGvBf,YAAYgB,SAAQC,iBACZC,kBAAoBR,SAASC,eAAe,sBAAwBM,WAAWE,qBAC9ED,kBAImB,OAApBD,WAAWZ,KAEXa,kBAAkBE,MAAMC,QAAU,QAElCH,kBAAkBE,MAAMC,QAAU,oDAChBH,kBAAmBD,WAAWZ,KAAKiB,WARrDT,OAAOC,QAAQC,IAAI,2DAA6DE,WAAWE,wBA3C3FI,CAAevB,aAEfwB,cAAchC,2BAIlBgC,cAAchC,sBACdqB,OAAOC,QAAQW,MAAM3B,OAAO4B,uBA1IhB,CAAC9B,SAAUC,4BAcPD,SAAUC,gBAE9BF,gBAAgBC,SAAUC,gBAG1BL,qBAAuBmC,aAAY,KAC/BhC,gBAAgBC,SAAUC,kBA9BZ,MAkClBa,SAASkB,iBAAiB,oBAAoB,WACT,WAA7BlB,SAASmB,gBACTL,cAAchC,uBAEdG,gBAAgBC,SAAUC,gBAC1BL,qBAAuBmC,aAAY,KAC/BhC,gBAAgBC,SAAUC,kBAxCpB,UAYlBiC,CAAelC,SAAUC,yBAwCED,SAAUC,oBAEjCkC,sBAAwBrB,SAASC,eAAe,+BAGtB,OAA1BoB,kCACAlB,OAAOC,QAAQC,IAAI,iCAKvBgB,sBAAsBH,iBAAiB,SAASI,qBACxCC,SAAW,GAGXC,cAAgBxB,SAASyB,iBAAiB,gCAG1CC,MAAQF,cAAc/B,OAAS,EAC/BkC,MAAQ,EAGZH,cAAclB,SAAQ,SAASsB,WACvBC,UAAYD,MAAME,aAAa,4BAC/BC,WAAaH,MAAME,aAAa,sBAClB,OAAdD,WAAsBE,WAAa,EAAG,KAClCC,SAAU,0CAAiBH,WAC1BI,MAAK,SAASC,WACPA,OAAO7C,QACPsC,OAAgB,MACb,KAECQ,eAAiB,iBAAmBN,UACpCO,gBAAkBpC,SAASqC,cAAc,OAC7CD,gBAAgBE,aAAa,KAAMH,gBACnCC,gBAAgBE,aAAa,QAAS,qBACtCF,gBAAgBG,UACZ,gDAAkDL,OAAOlB,QAAU,aAGnEwB,WAAaxC,SAASC,eAAekC,gBAGtB,OAAfK,YACAA,WAAWC,SAIfb,MAAMc,WAAWC,aAAaP,gBAAiBR,cAE5CM,OAAO7C,WAEjBuD,OAAM,SAAS7B,OACZZ,OAAOC,QAAQW,MAAMA,UAG7BQ,SAASsB,KAAKb,mBAKhBc,QAAQC,IAAIxB,gBAGZtC,gBAAgBC,SAAUC,sBAG1B6D,sBAAaC,gBAAgB,CAC/BjC,QAASW,MAAQ,OAASD,MAAQ,mCAClCwB,KAAOvB,QAAUD,MAAS,UAAY,eA1G9CyB,CAAsBjE,SAAUC"}