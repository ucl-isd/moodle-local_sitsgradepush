{"version":3,"file":"sitsgradepush.min.js","sources":["../src/sitsgradepush.js"],"sourcesContent":["import {schedulePushTask, getAssessmentsUpdate} from \"./sitsgradepush_helper\";\nimport {createProgressBar, updateProgressBar, createSpinner} from \"./progress\";\nimport notification from 'core/notification';\n\nlet updatePageIntervalId = null; // The interval ID for updating the progress.\nlet updatePageDelay = 15000; // The delay for updating the page.\n\n/**\n * Initialize the course module marks transfer page (index.php).\n *\n * @param {int} courseid\n * @param {int} coursemoduleid\n * @param {int[]} mappingids\n */\nexport const init = (courseid, coursemoduleid, mappingids) => {\n    // Initialize the transfer marks button.\n    initPushButton(courseid, mappingids);\n\n    // Update the tasks progresses.\n    updateTasksInfo(courseid);\n\n    // Update the tasks progresses every 15 seconds.\n    updatePageIntervalId = setInterval(() => {\n        updateTasksInfo(courseid);\n    }, updatePageDelay);\n\n    // Add event listener to stop update the page when the page is not visible. e.g. when the user switches to another tab.\n    document.addEventListener(\"visibilitychange\", function() {\n        if (document.visibilityState === \"hidden\") {\n            clearInterval(updatePageIntervalId);\n        } else {\n            updateTasksInfo(courseid);\n            updatePageIntervalId = setInterval(() => {\n                updateTasksInfo(courseid);\n            }, updatePageDelay);\n        }\n    });\n};\n\n/**\n * Initialize the transfer marks button.\n *\n * @param {int} courseid\n * @param {int[]} mappingids\n */\nfunction initPushButton(courseid, mappingids) {\n    // Get the push button.\n    let pushbuton = document.getElementById('local_sitsgradepush_pushbutton_async');\n\n    // Exit if the push button is not found.\n    if (pushbuton === null) {\n        return;\n    }\n\n    let promises = [];\n\n    // Schedule a push task for each assessment mapping.\n    pushbuton.addEventListener('click', async(e) => {\n        e.preventDefault();\n\n        // Number of assessment mappings.\n        let total = mappingids.length;\n        let count = 0;\n\n        // Schedule a task to push grades to SITS for each assessment mapping.\n        mappingids.forEach(function(mappingid) {\n            let promise = schedulePushTask(mappingid)\n                .then(function(result) {\n                    if (result.success) {\n                        count = count + 1;\n                    } else {\n                        // Create an error message row.\n                        let errormessagerow = document.createElement(\"tr\");\n                        errormessagerow.setAttribute(\"class\", \"error-message-row\");\n                        errormessagerow.innerHTML =\n                            '<td colspan=\"6>\">' +\n                            '<div class=\"alert alert-danger\" role=\"alert\">' + result.message + '</div>' +\n                            '</td>';\n\n                        // Find the task status container.\n                        let taskstatus = document.getElementById('task-status-container-' + mappingid);\n\n                        // Find the closest row to the assessment mapping.\n                        let currentrow = taskstatus.closest(\"tr\");\n\n                        // Remove the existing error message row if it exists.\n                        if (currentrow.nextElementSibling !== null &&\n                            currentrow.nextElementSibling.classList.contains(\"error-message-row\")) {\n                            currentrow.nextElementSibling.remove();\n                        }\n\n                        // Insert the error message row for the assessment mapping.\n                        currentrow.insertAdjacentElement(\"afterend\", errormessagerow);\n                    }\n                    return result.success;\n                })\n                .catch(function(error) {\n                    window.console.error(error);\n                });\n\n            promises.push(promise);\n        });\n\n        // Wait for all the push tasks to be scheduled.\n        await Promise.all(promises);\n\n        await updateTasksInfo(courseid);\n\n        // Display a notification.\n        await notification.addNotification({\n            message: count + ' of ' + total + ' push tasks have been scheduled.',\n            type: (count === total) ? 'success' : 'warning'\n        });\n    });\n}\n\n/**\n * Update all marks transfer tasks information.\n * e.g. progress bars, spinners and last transferred task date.\n *\n * @param {int} courseid\n * @return {void}\n */\nasync function updateTasksInfo(courseid) {\n    // Get all latest tasks statuses.\n    let update = await getAssessmentsUpdate(courseid);\n    if (update.success) {\n        // Parse the JSON string.\n        let assessments = JSON.parse(update.assessments);\n\n        if (assessments.length > 0) {\n            // Update the progress bars and spinners.\n            updateProgress(assessments);\n\n            // Update the last transferred task date.\n            updateLastTransferredTaskDate(assessments);\n        } else {\n            clearInterval(updatePageIntervalId);\n        }\n    } else {\n        // Stop updating the tasks information if there is an error getting the updated tasks information.\n        clearInterval(updatePageIntervalId);\n        window.console.error(update.message);\n    }\n}\n\n/**\n * Update the progress bars and spinners.\n *\n * @param {object[]} assessments\n */\nfunction updateProgress(assessments) {\n    // Get the task status containers.\n    let taskStatusContainers = document.querySelectorAll('.task-status');\n\n    // Filter assessments that are having task in progress.\n    let assessmentsHasTasks = assessments.filter(assessment => assessment.task !== null);\n\n    // The assessment mapping IDs having task in progress.\n    let assessmentIds = new Set(assessmentsHasTasks.map(item => item.assessmentmappingid));\n\n    // Remove the progress bars and spinners for the assessment mappings that are not having task in progress.\n    taskStatusContainers.forEach(taskStatusContainer => {\n        if (!assessmentIds.has(taskStatusContainer.getAttribute('data-assessmentmappingid'))) {\n            taskStatusContainer.innerHTML = '';\n        }\n    });\n\n    // Update the task status containers with progress bars and spinner.\n    assessmentsHasTasks.forEach(assessment => {\n        let task = assessment.task;\n        let progressBarId = 'progress-bar-' + task.assessmentmappingid;\n        let progressBar = document.getElementById(progressBarId);\n\n        // If the progress bar not exists, create a new one, otherwise update the progress.\n        if (!progressBar) {\n            progressBar = createProgressBar(progressBarId, 'async', task.assessmentmappingid, 0);\n            let taskStatusContainer = document.getElementById('task-status-container-' + task.assessmentmappingid);\n            if (taskStatusContainer) {\n                let spinner = createSpinner('text-primary', 'spinner-border-sm');\n                taskStatusContainer.appendChild(spinner);\n                taskStatusContainer.appendChild(progressBar);\n            }\n        } else {\n            updateProgressBar(progressBar, task.progress);\n        }\n    });\n}\n\n/**\n * Update the last transferred task date.\n *\n * @param {object[]} assessments\n */\nfunction updateLastTransferredTaskDate(assessments) {\n    let containers = document.querySelectorAll('.last-transfer-task-date');\n\n    containers.forEach(container => {\n        let assessment = assessments.find(\n            assessment => assessment.assessmentmappingid === container.getAttribute('data-assessmentmappingid')\n        );\n\n        if (assessment && assessment.lasttransfertime !== null) {\n            container.innerHTML = assessment.lasttransfertime;\n        }\n    });\n}\n"],"names":["updatePageIntervalId","updateTasksInfo","courseid","update","success","assessments","JSON","parse","length","taskStatusContainers","document","querySelectorAll","assessmentsHasTasks","filter","assessment","task","assessmentIds","Set","map","item","assessmentmappingid","forEach","taskStatusContainer","has","getAttribute","innerHTML","progressBarId","progressBar","getElementById","progress","spinner","appendChild","updateProgress","container","find","lasttransfertime","updateLastTransferredTaskDate","clearInterval","window","console","error","message","coursemoduleid","mappingids","pushbuton","promises","addEventListener","async","e","preventDefault","total","count","mappingid","promise","then","result","errormessagerow","createElement","setAttribute","currentrow","closest","nextElementSibling","classList","contains","remove","insertAdjacentElement","catch","push","Promise","all","notification","addNotification","type","initPushButton","setInterval","visibilityState"],"mappings":"gVAIIA,qBAAuB,oBAuHZC,gBAAgBC,cAEvBC,aAAe,8CAAqBD,aACpCC,OAAOC,QAAS,KAEZC,YAAcC,KAAKC,MAAMJ,OAAOE,aAEhCA,YAAYG,OAAS,YAqBTH,iBAEhBI,qBAAuBC,SAASC,iBAAiB,gBAGjDC,oBAAsBP,YAAYQ,QAAOC,YAAkC,OAApBA,WAAWC,OAGlEC,cAAgB,IAAIC,IAAIL,oBAAoBM,KAAIC,MAAQA,KAAKC,uBAGjEX,qBAAqBY,SAAQC,sBACpBN,cAAcO,IAAID,oBAAoBE,aAAa,+BACpDF,oBAAoBG,UAAY,OAKxCb,oBAAoBS,SAAQP,iBACpBC,KAAOD,WAAWC,KAClBW,cAAgB,gBAAkBX,KAAKK,oBACvCO,YAAcjB,SAASkB,eAAeF,kBAGrCC,4CASiBA,YAAaZ,KAAKc,cATtB,CACdF,aAAc,+BAAkBD,cAAe,QAASX,KAAKK,oBAAqB,OAC9EE,oBAAsBZ,SAASkB,eAAe,yBAA2Bb,KAAKK,wBAC9EE,oBAAqB,KACjBQ,SAAU,2BAAc,eAAgB,qBAC5CR,oBAAoBS,YAAYD,SAChCR,oBAAoBS,YAAYJ,kBAjDpCK,CAAe3B,sBA8DYA,aAClBK,SAASC,iBAAiB,4BAEhCU,SAAQY,gBACXnB,WAAaT,YAAY6B,MACzBpB,YAAcA,WAAWM,sBAAwBa,UAAUT,aAAa,8BAGxEV,YAA8C,OAAhCA,WAAWqB,mBACzBF,UAAUR,UAAYX,WAAWqB,qBApEjCC,CAA8B/B,cAE9BgC,cAAcrC,2BAIlBqC,cAAcrC,sBACdsC,OAAOC,QAAQC,MAAMrC,OAAOsC,uBAhIhB,CAACvC,SAAUwC,eAAgBC,wBA+BvBzC,SAAUyC,gBAE1BC,UAAYlC,SAASkB,eAAe,2CAGtB,OAAdgB,qBAIAC,SAAW,GAGfD,UAAUE,iBAAiB,SAASC,MAAAA,IAChCC,EAAEC,qBAGEC,MAAQP,WAAWnC,OACnB2C,MAAQ,EAGZR,WAAWtB,SAAQ,SAAS+B,eACpBC,SAAU,0CAAiBD,WAC1BE,MAAK,SAASC,WACPA,OAAOnD,QACP+C,OAAgB,MACb,KAECK,gBAAkB9C,SAAS+C,cAAc,MAC7CD,gBAAgBE,aAAa,QAAS,qBACtCF,gBAAgB/B,UACZ,iEACkD8B,OAAOd,QADzD,kBAQAkB,WAHajD,SAASkB,eAAe,yBAA2BwB,WAGxCQ,QAAQ,MAGE,OAAlCD,WAAWE,oBACXF,WAAWE,mBAAmBC,UAAUC,SAAS,sBACjDJ,WAAWE,mBAAmBG,SAIlCL,WAAWM,sBAAsB,WAAYT,wBAE1CD,OAAOnD,WAEjB8D,OAAM,SAAS1B,OACZF,OAAOC,QAAQC,MAAMA,UAG7BK,SAASsB,KAAKd,kBAIZe,QAAQC,IAAIxB,gBAEZ5C,gBAAgBC,gBAGhBoE,sBAAaC,gBAAgB,CAC/B9B,QAASU,MAAQ,OAASD,MAAQ,mCAClCsB,KAAOrB,QAAUD,MAAS,UAAY,eA/F9CuB,CAAevE,SAAUyC,YAGzB1C,gBAAgBC,UAGhBF,qBAAuB0E,aAAY,KAC/BzE,gBAAgBC,YAlBF,MAsBlBQ,SAASoC,iBAAiB,oBAAoB,WACT,WAA7BpC,SAASiE,gBACTtC,cAAcrC,uBAEdC,gBAAgBC,UAChBF,qBAAuB0E,aAAY,KAC/BzE,gBAAgBC,YA5BV"}