{"version":3,"file":"sitsgradepush.min.js","sources":["../src/sitsgradepush.js"],"sourcesContent":["import {getAssessmentsUpdate, schedulePushTask, updateProgressBar} from \"./sitsgradepush_helper\";\nimport notification from 'core/notification';\n\nlet updatePageIntervalId = null; // The interval ID for updating the progress.\nlet updatePageDelay = 15000; // The delay for updating the page.\nlet taskRunning = false;\nlet shouldRefresh = false;\n\n/**\n * Initialize the course module marks transfer page (index.php).\n *\n * @param {int} courseid\n * @param {string} sourcetype\n * @param {int} sourceid\n */\nexport const init = (courseid, sourcetype, sourceid) => {\n    // Initialize page update tasks.\n    initPageUpdate(courseid, sourcetype, sourceid);\n\n    // Initialize the confirmation modal.\n    initConfirmationModal(courseid, sourcetype, sourceid);\n};\n\n/**\n * Initialize page update on course module marks transfer page (index.php).\n *\n * @param {int} courseid\n * @param {string} sourcetype\n * @param {int} sourceid\n */\nfunction initPageUpdate(courseid, sourcetype, sourceid) {\n    // Update the tasks progresses.\n    updateTasksInfo(courseid, sourcetype, sourceid);\n\n    // Update the tasks progresses every 15 seconds.\n    updatePageIntervalId = setInterval(() => {\n        updateTasksInfo(courseid, sourcetype, sourceid);\n    }, updatePageDelay);\n\n    // Add event listener to stop update the page when the page is not visible. e.g. when the user switches to another tab.\n    document.addEventListener(\"visibilitychange\", function() {\n        if (document.visibilityState === \"hidden\") {\n            clearInterval(updatePageIntervalId);\n        } else {\n            updateTasksInfo(courseid, sourcetype, sourceid);\n            updatePageIntervalId = setInterval(() => {\n                updateTasksInfo(courseid, sourcetype, sourceid);\n            }, updatePageDelay);\n        }\n    });\n}\n\n/**\n * Initialize the confirmation modal.\n *\n * @param {int} courseid\n * @param {string} sourcetype\n * @param {int} sourceid\n */\nfunction initConfirmationModal(courseid, sourcetype, sourceid) {\n    // Find the confirmation modal.\n    let confirmTransferButton = document.getElementById(\"js-transfer-modal-button\");\n\n    // Exit if the confirmation modal is not found.\n    if (confirmTransferButton === null) {\n        window.console.log(\"Confirmation modal not found.\");\n        return;\n    }\n\n    // Add event listener to the confirmation modal.\n    confirmTransferButton.addEventListener(\"click\", async function() {\n        // Check if it is an async push button.\n        let sync = confirmTransferButton.getAttribute('data-sync');\n        if (sync === \"1\") {\n            // Do sync push.\n            window.location.href = `/local/sitsgradepush/index.php?courseid=${courseid}&sourcetype=${sourcetype}&id=${sourceid}` +\n            `&pushgrade=1`;\n        } else {\n            // Do async push.\n            let promises = [];\n\n            // Find all valid assessment mapping IDs.\n            let mappingtables = document.querySelectorAll('.sitsgradepush-history-table');\n\n            // Number of assessment mappings.\n            let total = mappingtables.length - 1; // Exclude the invalid students table.\n            let count = 0;\n\n            // Schedule a task to push grades to SITS for each assessment mapping.\n            mappingtables.forEach(function(table) {\n                let mappingid = table.getAttribute('data-assessmentmappingid');\n                let markscount = table.getAttribute('data-markscount');\n                if (mappingid !== null && markscount > 0) {\n                    let promise = schedulePushTask(mappingid)\n                        .then(function(result) {\n                            if (result.success) {\n                                count = count + 1;\n                            } else {\n                                // Create an error message row.\n                                let errormessageid = \"error-message-\" + mappingid;\n                                let errormessagerow = document.createElement(\"div\");\n                                errormessagerow.setAttribute(\"id\", errormessageid);\n                                errormessagerow.setAttribute(\"class\", \"error-message-row\");\n                                errormessagerow.innerHTML =\n                                    '<div class=\"alert alert-danger\" role=\"alert\">' + result.message + '</div>';\n\n                                // Find the closest row to the assessment mapping.\n                                let currentrow = document.getElementById(errormessageid);\n\n                                // Remove the error message row if it exists.\n                                if (currentrow !== null) {\n                                    currentrow.remove();\n                                }\n\n                                // Insert the error message above the table.\n                                table.parentNode.insertBefore(errormessagerow, table);\n                            }\n                            return result.success;\n                        })\n                        .catch(function(error) {\n                            window.console.error(error);\n                        });\n\n                    promises.push(promise);\n                }\n            });\n\n            // Wait for all the push tasks to be scheduled.\n            await Promise.all(promises);\n\n            // Update the page.\n            await updateTasksInfo(courseid, sourcetype, sourceid);\n\n            // Display a notification.\n            await notification.addNotification({\n                message: count + ' of ' + total + ' push tasks have been scheduled.',\n                type: (count === total) ? 'success' : 'warning'\n            });\n        }\n    });\n}\n\n/**\n * Update all marks transfer tasks information, e.g. progress bars.\n *\n * @param {int} courseid\n * @param {string} sourcetype\n * @param {int} sourceid\n * @return {Promise<*>}\n */\nasync function updateTasksInfo(courseid, sourcetype, sourceid) {\n    // Get all latest tasks statuses.\n    let update = await getAssessmentsUpdate(courseid, sourcetype, sourceid);\n    if (update.success) {\n        // Parse the JSON string.\n        let assessments = JSON.parse(update.assessments);\n        if (assessments.length > 0) {\n            // Update the progress bars.\n            updateProgress(assessments);\n        } else {\n            clearInterval(updatePageIntervalId);\n        }\n    } else {\n        // Stop updating the tasks information if there is an error getting the updated tasks information.\n        clearInterval(updatePageIntervalId);\n        window.console.error(update.message);\n    }\n\n    return update;\n}\n\n/**\n * Update the progress bars.\n *\n * @param {object[]} assessments\n */\nfunction updateProgress(assessments) {\n    // Check if there is any running task.\n    taskRunning = hasRunningTask(assessments);\n\n    // If there is any running task, mark page should be refreshed.\n    if (taskRunning) {\n        shouldRefresh = true;\n    }\n\n    // Refresh the page if there is no running task and should be refreshed.\n    if (shouldRefresh && !taskRunning) {\n        shouldRefresh = false;\n        location.reload();\n    }\n\n    // Get the push button element.\n    let pushbutton = document.getElementById('push-all-button');\n    if (pushbutton) {\n        // Disable the push button if there is any running task, otherwise enable it.\n        pushbutton.disabled = taskRunning;\n    } else {\n        window.console.log('Push button not found');\n    }\n\n    assessments.forEach(assessment => {\n        let progressContainer = document.getElementById('progress-container-' + assessment.assessmentmappingid);\n        if (!progressContainer) {\n            window.console.log('Progress container not found for assessment mapping ID: ' + assessment.assessmentmappingid);\n            return;\n        }\n        if (assessment.task === null) {\n            // Hide the progress container if there is no task in progress.\n            progressContainer.classList.add('d-none');\n        } else {\n            progressContainer.classList.remove('d-none');\n            updateProgressBar(progressContainer, assessment.task.progress);\n        }\n    });\n}\n\n/**\n * Check if there is a running task.\n *\n * @param {object[]} assessments\n * @return {boolean}\n */\nfunction hasRunningTask(assessments) {\n    for (let i = 0; i < assessments.length; i++) {\n        if (assessments[i].task !== null) {\n            return true;\n        }\n    }\n    return false;\n}\n"],"names":["updatePageIntervalId","taskRunning","shouldRefresh","updateTasksInfo","courseid","sourcetype","sourceid","update","success","assessments","JSON","parse","length","i","task","hasRunningTask","location","reload","pushbutton","document","getElementById","disabled","window","console","log","forEach","assessment","progressContainer","assessmentmappingid","classList","add","remove","progress","updateProgress","clearInterval","error","message","setInterval","addEventListener","visibilityState","initPageUpdate","confirmTransferButton","async","getAttribute","href","promises","mappingtables","querySelectorAll","total","count","table","mappingid","markscount","promise","then","result","errormessageid","errormessagerow","createElement","setAttribute","innerHTML","currentrow","parentNode","insertBefore","catch","push","Promise","all","notification","addNotification","type","initConfirmationModal"],"mappings":"yTAGIA,qBAAuB,KAEvBC,aAAc,EACdC,eAAgB,iBAgJLC,gBAAgBC,SAAUC,WAAYC,cAE7CC,aAAe,8CAAqBH,SAAUC,WAAYC,aAC1DC,OAAOC,QAAS,KAEZC,YAAcC,KAAKC,MAAMJ,OAAOE,aAChCA,YAAYG,OAAS,WAoBTH,aAEpBR,qBA4CoBQ,iBACf,IAAII,EAAI,EAAGA,EAAIJ,YAAYG,OAAQC,OACR,OAAxBJ,YAAYI,GAAGC,YACR,SAGR,EAlDOC,CAAeN,aAGzBR,cACAC,eAAgB,GAIhBA,gBAAkBD,cAClBC,eAAgB,EAChBc,SAASC,cAITC,WAAaC,SAASC,eAAe,mBACrCF,WAEAA,WAAWG,SAAWpB,YAEtBqB,OAAOC,QAAQC,IAAI,yBAGvBf,YAAYgB,SAAQC,iBACZC,kBAAoBR,SAASC,eAAe,sBAAwBM,WAAWE,qBAC9ED,kBAImB,OAApBD,WAAWZ,KAEXa,kBAAkBE,UAAUC,IAAI,WAEhCH,kBAAkBE,UAAUE,OAAO,sDACjBJ,kBAAmBD,WAAWZ,KAAKkB,WARrDV,OAAOC,QAAQC,IAAI,2DAA6DE,WAAWE,wBA7C3FK,CAAexB,aAEfyB,cAAclC,2BAIlBkC,cAAclC,sBACdsB,OAAOC,QAAQY,MAAM5B,OAAO6B,gBAGzB7B,qBAzJS,CAACH,SAAUC,WAAYC,sBAenBF,SAAUC,WAAYC,UAE1CH,gBAAgBC,SAAUC,WAAYC,UAGtCN,qBAAuBqC,aAAY,KAC/BlC,gBAAgBC,SAAUC,WAAYC,YAhCxB,MAoClBa,SAASmB,iBAAiB,oBAAoB,WACT,WAA7BnB,SAASoB,gBACTL,cAAclC,uBAEdG,gBAAgBC,SAAUC,WAAYC,UACtCN,qBAAuBqC,aAAY,KAC/BlC,gBAAgBC,SAAUC,WAAYC,YA1ChC,UAalBkC,CAAepC,SAAUC,WAAYC,mBA0CVF,SAAUC,WAAYC,cAE7CmC,sBAAwBtB,SAASC,eAAe,+BAGtB,OAA1BqB,kCACAnB,OAAOC,QAAQC,IAAI,iCAKvBiB,sBAAsBH,iBAAiB,SAASI,oBAG/B,MADFD,sBAAsBE,aAAa,aAG1CrB,OAAON,SAAS4B,KAAO,kDAA2CxC,gCAAuBC,0BAAiBC,6BAEvG,KAECuC,SAAW,GAGXC,cAAgB3B,SAAS4B,iBAAiB,gCAG1CC,MAAQF,cAAclC,OAAS,EAC/BqC,MAAQ,EAGZH,cAAcrB,SAAQ,SAASyB,WACvBC,UAAYD,MAAMP,aAAa,4BAC/BS,WAAaF,MAAMP,aAAa,sBAClB,OAAdQ,WAAsBC,WAAa,EAAG,KAClCC,SAAU,0CAAiBF,WAC1BG,MAAK,SAASC,WACPA,OAAO/C,QACPyC,OAAgB,MACb,KAECO,eAAiB,iBAAmBL,UACpCM,gBAAkBtC,SAASuC,cAAc,OAC7CD,gBAAgBE,aAAa,KAAMH,gBACnCC,gBAAgBE,aAAa,QAAS,qBACtCF,gBAAgBG,UACZ,gDAAkDL,OAAOnB,QAAU,aAGnEyB,WAAa1C,SAASC,eAAeoC,gBAGtB,OAAfK,YACAA,WAAW9B,SAIfmB,MAAMY,WAAWC,aAAaN,gBAAiBP,cAE5CK,OAAO/C,WAEjBwD,OAAM,SAAS7B,OACZb,OAAOC,QAAQY,MAAMA,UAG7BU,SAASoB,KAAKZ,mBAKhBa,QAAQC,IAAItB,gBAGZ1C,gBAAgBC,SAAUC,WAAYC,gBAGtC8D,sBAAaC,gBAAgB,CAC/BjC,QAASa,MAAQ,OAASD,MAAQ,mCAClCsB,KAAOrB,QAAUD,MAAS,UAAY,gBApHlDuB,CAAsBnE,SAAUC,WAAYC"}