{"version":3,"file":"select_source.min.js","sources":["../src/select_source.js"],"sourcesContent":["import {tableHelperInit} from './table_helper';\nimport notification from \"core/notification\";\nimport ModalEvents from 'core/modal_events';\nimport ModalSaveCancel from 'core/modal_save_cancel';\nimport {mapAssessment} from './sitsgradepush_helper';\nimport {getString} from 'core/str';\n\n// The global variable for extension information page URL.\nlet extensionInfoPageUrl = null;\n\nexport const init = (extensioninfopageurl) => {\n    // Set extension Information page url.\n    extensionInfoPageUrl = extensioninfopageurl;\n\n    // Initialise the table helper.\n    tableHelperInit('existing-activity-table', 2, 'filterInput');\n\n    // Get all the select assessment buttons.\n    let selectAssessmentButtons = document.querySelectorAll('.select-assessment-button');\n\n    if (selectAssessmentButtons) {\n        // Add an event listener to each select assessment button.\n        // When the user clicks on each button, map the assessment to the selected component grade.\n        selectAssessmentButtons.forEach(function(button) {\n            button.addEventListener('click', function() {\n                selectAssessment(button).then(\n                    (result) => {\n                        return result;\n                    }\n                ).catch((error) => {\n                    notification.addNotification({\n                        message: error.message,\n                        type: 'error'\n                    });\n                    window.console.error(error);\n                });\n            });\n        });\n    }\n};\n\n/**\n * Show a modal to confirm the user wants to map the assessment to the selected component grade.\n *\n * @param {HTMLElement} button The select assessment button element.\n * @return {Promise<void>}\n */\nasync function selectAssessment(button) {\n    // Get assessment component data from the button.\n    let mapcode = button.getAttribute('data-mapcode');\n    let mabseq = button.getAttribute('data-mabseq');\n    let mabid = button.getAttribute('data-mabid');\n    let mabname = button.getAttribute('data-mabname');\n    let courseid = button.getAttribute('data-courseid');\n    let sourcetype = button.getAttribute('data-sourcetype');\n    let sourceid = button.getAttribute('data-sourceid');\n    let reassess = button.getAttribute('data-reassess');\n    let partid = button.getAttribute('data-partid');\n    let extensioneligible = button.getAttribute('data-extensioneligible');\n\n    // Find the closest row to the button.\n    let currentrow = button.closest('tr');\n    let type = currentrow.getElementsByTagName('td')[0].innerHTML;\n    let name = currentrow.getElementsByTagName('td')[1].innerHTML;\n    let endDate = currentrow.getElementsByTagName('td')[3].innerHTML;\n\n    const modal = await ModalSaveCancel.create({\n        title: 'Confirmation',\n        body: getModalBody(type, name, endDate, mapcode, mabseq, mabname, extensioneligible),\n        large: true,\n        buttons: {'save': 'Confirm', 'cancel': 'Cancel'}\n    });\n\n    await modal.show();\n\n    // Store a reference to the modal root element.\n    const modalRoot = modal.getRoot();\n\n    modal.getRoot().on(ModalEvents.save, () => {\n        // Get the current value of the import SoRA extensions checkbox directly from the modal DOM.\n        const soraCheckbox = modalRoot.find('#import-sora')[0];\n        const extensions = soraCheckbox ? soraCheckbox.checked : false;\n        mapAssessment(courseid, sourcetype, sourceid, mabid, reassess, extensions, partid).then(\n            (result) => {\n                if (result.success) {\n                    // Store the success message in localStorage for display on the dashboard page.\n                    localStorage.setItem('successMessage', result.message);\n\n                    // Redirect to the dashboard page.\n                    let url = '/local/sitsgradepush/dashboard.php?id=' + courseid;\n                    if (reassess === '1') {\n                        url += '&reassess=' + reassess;\n                    }\n                    window.location.href = url;\n                } else {\n                    notification.addNotification({\n                        message: result.message,\n                        type: 'error'\n                    });\n                }\n                return result;\n            }\n        ).catch((error) => {\n            window.console.error(error);\n        });\n    });\n}\n\n/**\n * Get the modal body.\n *\n * @param {string} type\n * @param {string} name\n * @param {string} endDate\n * @param {string} mapcode\n * @param {string} mabseq\n * @param {string} mabname\n * @param {string} extensioneligible\n * @return {string}\n */\nasync function getModalBody(type, name, endDate, mapcode, mabseq, mabname, extensioneligible) {\n    // Fetch all strings in parallel.\n    const [\n        titleSubtitle, titleMapcode, titleSequence, titleSitsAssessment,\n        titleType, titleName, titleEndDate, titleExtensionsText, titleImportSoraExtension, titleViewGuide, textToMoodleActivity\n    ] = await Promise.all([\n        getString('selectsource:modal:subtitle', 'local_sitsgradepush'),\n        getString('selectsource:modal:mapcode', 'local_sitsgradepush'),\n        getString('selectsource:modal:sequence', 'local_sitsgradepush'),\n        getString('selectsource:modal:sitsassessment', 'local_sitsgradepush'),\n        getString('selectsource:modal:type', 'local_sitsgradepush'),\n        getString('selectsource:modal:name', 'local_sitsgradepush'),\n        getString('selectsource:modal:enddate', 'local_sitsgradepush'),\n        getString('selectsource:modal:extensions', 'local_sitsgradepush'),\n        getString('selectsource:modal:importextension', 'local_sitsgradepush'),\n        getString('selectsource:modal:viewguide', 'local_sitsgradepush'),\n        getString('selectsource:modal:tomoodleactivity', 'local_sitsgradepush')\n    ]);\n\n    // Handle SoRA extension checkbox conditionally.\n    const extensionSection = extensioneligible === '1' ? `\n        <th>${titleExtensionsText}</th>\n    ` : '';\n\n    const extensionContent = extensioneligible === '1' ? `\n        <td>\n            <div class=\"form-check\">\n                <input class=\"form-check-input\" type=\"checkbox\" id=\"import-sora\" checked>\n                <label class=\"form-check-label\" for=\"import-sora\">${titleImportSoraExtension}</label>\n            </div>\n            <p>\n                <a href=\"${extensionInfoPageUrl}\" target=\"_blank\">\n                    ${titleViewGuide}\n                </a>\n            </p>\n        </td>\n    ` : '';\n\n    return `\n        <div class=\"modal-body\">\n            <p>${titleSubtitle}</p>\n\n            <table class=\"table table-bordered\">\n                <thead class=\"thead-light\">\n                    <th>${titleMapcode}</th>\n                    <th>${titleSequence}</th>\n                    <th>${titleSitsAssessment}</th>\n                    ${extensionSection}\n                </thead>\n                <tr>\n                    <td>${mapcode}</td>\n                    <td>${mabseq}</td>\n                    <td>${mabname}</td>\n                    ${extensionContent}\n                </tr>\n            </table>\n\n            <p>${textToMoodleActivity}</p>\n\n            <table class=\"table table-bordered\">\n                <thead class=\"thead-light\">\n                    <th>${titleType}</th>\n                    <th>${titleName}</th>\n                    <th>${titleEndDate}</th>\n                </thead>\n                <tr>\n                    <td>${type}</td>\n                    <td>${name}</td>\n                    <td>${endDate}</td>\n                </tr>\n            </table>\n        </div>`;\n}\n"],"names":["extensionInfoPageUrl","getModalBody","type","name","endDate","mapcode","mabseq","mabname","extensioneligible","titleSubtitle","titleMapcode","titleSequence","titleSitsAssessment","titleType","titleName","titleEndDate","titleExtensionsText","titleImportSoraExtension","titleViewGuide","textToMoodleActivity","Promise","all","extensionSection","extensionContent","extensioninfopageurl","selectAssessmentButtons","document","querySelectorAll","forEach","button","addEventListener","getAttribute","mabid","courseid","sourcetype","sourceid","reassess","partid","currentrow","closest","getElementsByTagName","innerHTML","modal","ModalSaveCancel","create","title","body","large","buttons","show","modalRoot","getRoot","on","ModalEvents","save","soraCheckbox","find","extensions","checked","then","result","success","localStorage","setItem","message","url","window","location","href","addNotification","catch","error","console","selectAssessment"],"mappings":"kmBAQIA,qBAAuB,oBAgHZC,aAAaC,KAAMC,KAAMC,QAASC,QAASC,OAAQC,QAASC,yBAGnEC,cAAeC,aAAcC,cAAeC,oBAC5CC,UAAWC,UAAWC,aAAcC,oBAAqBC,yBAA0BC,eAAgBC,4BAC7FC,QAAQC,IAAI,EAClB,kBAAU,8BAA+B,wBACzC,kBAAU,6BAA8B,wBACxC,kBAAU,8BAA+B,wBACzC,kBAAU,oCAAqC,wBAC/C,kBAAU,0BAA2B,wBACrC,kBAAU,0BAA2B,wBACrC,kBAAU,6BAA8B,wBACxC,kBAAU,gCAAiC,wBAC3C,kBAAU,qCAAsC,wBAChD,kBAAU,+BAAgC,wBAC1C,kBAAU,sCAAuC,yBAI/CC,iBAAyC,MAAtBd,0CACfQ,mCACN,GAEEO,iBAAyC,MAAtBf,+OAIuCS,4GAGzCjB,wEACLkB,gFAId,sEAIST,wJAISC,uDACAC,wDACAC,0DACJU,sGAGIjB,kDACAC,iDACAC,8CACJgB,4FAILJ,+JAISN,oDACAC,oDACAC,uGAGAb,+CACAC,+CACAC,4FAlLLoB,uBAEjBxB,qBAAuBwB,uDAGP,0BAA2B,EAAG,mBAG1CC,wBAA0BC,SAASC,iBAAiB,6BAEpDF,yBAGAA,wBAAwBG,SAAQ,SAASC,QACrCA,OAAOC,iBAAiB,SAAS,2BAuBbD,YAExBxB,QAAUwB,OAAOE,aAAa,gBAC9BzB,OAASuB,OAAOE,aAAa,eAC7BC,MAAQH,OAAOE,aAAa,cAC5BxB,QAAUsB,OAAOE,aAAa,gBAC9BE,SAAWJ,OAAOE,aAAa,iBAC/BG,WAAaL,OAAOE,aAAa,mBACjCI,SAAWN,OAAOE,aAAa,iBAC/BK,SAAWP,OAAOE,aAAa,iBAC/BM,OAASR,OAAOE,aAAa,eAC7BvB,kBAAoBqB,OAAOE,aAAa,0BAGxCO,WAAaT,OAAOU,QAAQ,MAC5BrC,KAAOoC,WAAWE,qBAAqB,MAAM,GAAGC,UAChDtC,KAAOmC,WAAWE,qBAAqB,MAAM,GAAGC,UAChDrC,QAAUkC,WAAWE,qBAAqB,MAAM,GAAGC,gBAEjDC,YAAcC,2BAAgBC,OAAO,CACvCC,MAAO,eACPC,KAAM7C,aAAaC,KAAMC,KAAMC,QAASC,QAASC,OAAQC,QAASC,mBAClEuC,OAAO,EACPC,QAAS,MAAS,iBAAqB,kBAGrCN,MAAMO,aAGNC,UAAYR,MAAMS,UAExBT,MAAMS,UAAUC,GAAGC,sBAAYC,MAAM,WAE3BC,aAAeL,UAAUM,KAAK,gBAAgB,GAC9CC,aAAaF,cAAeA,aAAaG,gDACjCzB,SAAUC,WAAYC,SAAUH,MAAOI,SAAUqB,WAAYpB,QAAQsB,MAC9EC,YACOA,OAAOC,QAAS,CAEhBC,aAAaC,QAAQ,iBAAkBH,OAAOI,aAG1CC,IAAM,yCAA2ChC,SACpC,MAAbG,WACA6B,KAAO,aAAe7B,UAE1B8B,OAAOC,SAASC,KAAOH,+BAEVI,gBAAgB,CACzBL,QAASJ,OAAOI,QAChB9D,KAAM,iBAGP0D,UAEbU,OAAOC,QACLL,OAAOM,QAAQD,MAAMA,cA9EjBE,CAAiB5C,QAAQ8B,MACpBC,QACUA,SAEbU,OAAOC,8BACQF,gBAAgB,CACzBL,QAASO,MAAMP,QACf9D,KAAM,UAEVgE,OAAOM,QAAQD,MAAMA"}